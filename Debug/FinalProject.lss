
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000306e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  0000306e  00003102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800180  00800180  00003222  2**0
                  ALLOC
  3 .stab         00001ed8  00000000  00000000  00003224  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a89  00000000  00000000  000050fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00005d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00005f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00008321  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  00009698  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a870  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000aa30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000ad23  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b6f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 06 10 	jmp	0x200c	; 0x200c <__vector_1>
       8:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2d 0c 	call	0x185a	; 0x185a <main>
      8a:	0c 94 35 18 	jmp	0x306a	; 0x306a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e7       	ldi	r26, 0x77	; 119
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 26 18 	jmp	0x304c	; 0x304c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 26 18 	jmp	0x304c	; 0x304c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e7       	ldi	r24, 0x77	; 119
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 06 18 	jmp	0x300c	; 0x300c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e7       	ldi	r22, 0x77	; 119
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 26 18 	jmp	0x304c	; 0x304c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 26 18 	jmp	0x304c	; 0x304c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 26 18 	jmp	0x304c	; 0x304c <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 07 18 	jmp	0x300e	; 0x300e <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 23 18 	jmp	0x3046	; 0x3046 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e1 58       	subi	r30, 0x81	; 129
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <DIO_vsetPINDir>:


#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <DIO_vsetPINDir+0x6>
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <DIO_vsetPINDir+0x8>
     e00:	0f 92       	push	r0
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	89 83       	std	Y+1, r24	; 0x01
     e08:	6a 83       	std	Y+2, r22	; 0x02
     e0a:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	3d 83       	std	Y+5, r19	; 0x05
     e14:	2c 83       	std	Y+4, r18	; 0x04
     e16:	8c 81       	ldd	r24, Y+4	; 0x04
     e18:	9d 81       	ldd	r25, Y+5	; 0x05
     e1a:	82 34       	cpi	r24, 0x42	; 66
     e1c:	91 05       	cpc	r25, r1
     e1e:	09 f4       	brne	.+2      	; 0xe22 <DIO_vsetPINDir+0x2a>
     e20:	44 c0       	rjmp	.+136    	; 0xeaa <DIO_vsetPINDir+0xb2>
     e22:	2c 81       	ldd	r18, Y+4	; 0x04
     e24:	3d 81       	ldd	r19, Y+5	; 0x05
     e26:	23 34       	cpi	r18, 0x43	; 67
     e28:	31 05       	cpc	r19, r1
     e2a:	34 f4       	brge	.+12     	; 0xe38 <DIO_vsetPINDir+0x40>
     e2c:	8c 81       	ldd	r24, Y+4	; 0x04
     e2e:	9d 81       	ldd	r25, Y+5	; 0x05
     e30:	81 34       	cpi	r24, 0x41	; 65
     e32:	91 05       	cpc	r25, r1
     e34:	71 f0       	breq	.+28     	; 0xe52 <DIO_vsetPINDir+0x5a>
     e36:	bc c0       	rjmp	.+376    	; 0xfb0 <DIO_vsetPINDir+0x1b8>
     e38:	2c 81       	ldd	r18, Y+4	; 0x04
     e3a:	3d 81       	ldd	r19, Y+5	; 0x05
     e3c:	23 34       	cpi	r18, 0x43	; 67
     e3e:	31 05       	cpc	r19, r1
     e40:	09 f4       	brne	.+2      	; 0xe44 <DIO_vsetPINDir+0x4c>
     e42:	5f c0       	rjmp	.+190    	; 0xf02 <DIO_vsetPINDir+0x10a>
     e44:	8c 81       	ldd	r24, Y+4	; 0x04
     e46:	9d 81       	ldd	r25, Y+5	; 0x05
     e48:	84 34       	cpi	r24, 0x44	; 68
     e4a:	91 05       	cpc	r25, r1
     e4c:	09 f4       	brne	.+2      	; 0xe50 <DIO_vsetPINDir+0x58>
     e4e:	85 c0       	rjmp	.+266    	; 0xf5a <DIO_vsetPINDir+0x162>
     e50:	af c0       	rjmp	.+350    	; 0xfb0 <DIO_vsetPINDir+0x1b8>
	{
		
		
		case 'A':
		if(direction==1)
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	a1 f4       	brne	.+40     	; 0xe80 <DIO_vsetPINDir+0x88>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
     e58:	aa e3       	ldi	r26, 0x3A	; 58
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	ea e3       	ldi	r30, 0x3A	; 58
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	48 2f       	mov	r20, r24
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	02 2e       	mov	r0, r18
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DIO_vsetPINDir+0x7e>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	0a 94       	dec	r0
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <DIO_vsetPINDir+0x7a>
     e7a:	84 2b       	or	r24, r20
     e7c:	8c 93       	st	X, r24
     e7e:	98 c0       	rjmp	.+304    	; 0xfb0 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
     e80:	aa e3       	ldi	r26, 0x3A	; 58
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	ea e3       	ldi	r30, 0x3A	; 58
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	48 2f       	mov	r20, r24
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	02 2e       	mov	r0, r18
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <DIO_vsetPINDir+0xa6>
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	0a 94       	dec	r0
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <DIO_vsetPINDir+0xa2>
     ea2:	80 95       	com	r24
     ea4:	84 23       	and	r24, r20
     ea6:	8c 93       	st	X, r24
     ea8:	83 c0       	rjmp	.+262    	; 0xfb0 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'B':
		if(direction==1)
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	a1 f4       	brne	.+40     	; 0xed8 <DIO_vsetPINDir+0xe0>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
     eb0:	a7 e3       	ldi	r26, 0x37	; 55
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e7 e3       	ldi	r30, 0x37	; 55
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	48 2f       	mov	r20, r24
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 2e       	mov	r0, r18
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_vsetPINDir+0xd6>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <DIO_vsetPINDir+0xd2>
     ed2:	84 2b       	or	r24, r20
     ed4:	8c 93       	st	X, r24
     ed6:	6c c0       	rjmp	.+216    	; 0xfb0 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
     ed8:	a7 e3       	ldi	r26, 0x37	; 55
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e7 e3       	ldi	r30, 0x37	; 55
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DIO_vsetPINDir+0xfe>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <DIO_vsetPINDir+0xfa>
     efa:	80 95       	com	r24
     efc:	84 23       	and	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	57 c0       	rjmp	.+174    	; 0xfb0 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'C':
		if(direction==1)
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	a1 f4       	brne	.+40     	; 0xf30 <DIO_vsetPINDir+0x138>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
     f08:	a4 e3       	ldi	r26, 0x34	; 52
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e4 e3       	ldi	r30, 0x34	; 52
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	48 2f       	mov	r20, r24
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	02 2e       	mov	r0, r18
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_vsetPINDir+0x12e>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	0a 94       	dec	r0
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <DIO_vsetPINDir+0x12a>
     f2a:	84 2b       	or	r24, r20
     f2c:	8c 93       	st	X, r24
     f2e:	40 c0       	rjmp	.+128    	; 0xfb0 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
     f30:	a4 e3       	ldi	r26, 0x34	; 52
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e4 e3       	ldi	r30, 0x34	; 52
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	48 2f       	mov	r20, r24
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	02 2e       	mov	r0, r18
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <DIO_vsetPINDir+0x156>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	0a 94       	dec	r0
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <DIO_vsetPINDir+0x152>
     f52:	80 95       	com	r24
     f54:	84 23       	and	r24, r20
     f56:	8c 93       	st	X, r24
     f58:	2b c0       	rjmp	.+86     	; 0xfb0 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'D':
		if(direction==1)
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	a1 f4       	brne	.+40     	; 0xf88 <DIO_vsetPINDir+0x190>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
     f60:	a1 e3       	ldi	r26, 0x31	; 49
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e1 e3       	ldi	r30, 0x31	; 49
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	48 2f       	mov	r20, r24
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 2e       	mov	r0, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <DIO_vsetPINDir+0x186>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <DIO_vsetPINDir+0x182>
     f82:	84 2b       	or	r24, r20
     f84:	8c 93       	st	X, r24
     f86:	14 c0       	rjmp	.+40     	; 0xfb0 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
     f88:	a1 e3       	ldi	r26, 0x31	; 49
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e1 e3       	ldi	r30, 0x31	; 49
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	02 2e       	mov	r0, r18
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <DIO_vsetPINDir+0x1ae>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	0a 94       	dec	r0
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <DIO_vsetPINDir+0x1aa>
     faa:	80 95       	com	r24
     fac:	84 23       	and	r24, r20
     fae:	8c 93       	st	X, r24
		}
		break;
		default: 
		break;
	}
}
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <DIO_write>:


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <DIO_write+0x6>
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <DIO_write+0x8>
     fc8:	0f 92       	push	r0
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	6a 83       	std	Y+2, r22	; 0x02
     fd2:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	3d 83       	std	Y+5, r19	; 0x05
     fdc:	2c 83       	std	Y+4, r18	; 0x04
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	9d 81       	ldd	r25, Y+5	; 0x05
     fe2:	82 34       	cpi	r24, 0x42	; 66
     fe4:	91 05       	cpc	r25, r1
     fe6:	09 f4       	brne	.+2      	; 0xfea <DIO_write+0x2a>
     fe8:	44 c0       	rjmp	.+136    	; 0x1072 <DIO_write+0xb2>
     fea:	2c 81       	ldd	r18, Y+4	; 0x04
     fec:	3d 81       	ldd	r19, Y+5	; 0x05
     fee:	23 34       	cpi	r18, 0x43	; 67
     ff0:	31 05       	cpc	r19, r1
     ff2:	34 f4       	brge	.+12     	; 0x1000 <DIO_write+0x40>
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	9d 81       	ldd	r25, Y+5	; 0x05
     ff8:	81 34       	cpi	r24, 0x41	; 65
     ffa:	91 05       	cpc	r25, r1
     ffc:	71 f0       	breq	.+28     	; 0x101a <DIO_write+0x5a>
     ffe:	bc c0       	rjmp	.+376    	; 0x1178 <DIO_write+0x1b8>
    1000:	2c 81       	ldd	r18, Y+4	; 0x04
    1002:	3d 81       	ldd	r19, Y+5	; 0x05
    1004:	23 34       	cpi	r18, 0x43	; 67
    1006:	31 05       	cpc	r19, r1
    1008:	09 f4       	brne	.+2      	; 0x100c <DIO_write+0x4c>
    100a:	5f c0       	rjmp	.+190    	; 0x10ca <DIO_write+0x10a>
    100c:	8c 81       	ldd	r24, Y+4	; 0x04
    100e:	9d 81       	ldd	r25, Y+5	; 0x05
    1010:	84 34       	cpi	r24, 0x44	; 68
    1012:	91 05       	cpc	r25, r1
    1014:	09 f4       	brne	.+2      	; 0x1018 <DIO_write+0x58>
    1016:	85 c0       	rjmp	.+266    	; 0x1122 <DIO_write+0x162>
    1018:	af c0       	rjmp	.+350    	; 0x1178 <DIO_write+0x1b8>
	{
		case 'A' :
		
		if(outputvalue==1)
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	a1 f4       	brne	.+40     	; 0x1048 <DIO_write+0x88>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
    1020:	ab e3       	ldi	r26, 0x3B	; 59
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	eb e3       	ldi	r30, 0x3B	; 59
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_write+0x7e>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_write+0x7a>
    1042:	84 2b       	or	r24, r20
    1044:	8c 93       	st	X, r24
    1046:	98 c0       	rjmp	.+304    	; 0x1178 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
    1048:	ab e3       	ldi	r26, 0x3B	; 59
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	eb e3       	ldi	r30, 0x3B	; 59
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	48 2f       	mov	r20, r24
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 2e       	mov	r0, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <DIO_write+0xa6>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <DIO_write+0xa2>
    106a:	80 95       	com	r24
    106c:	84 23       	and	r24, r20
    106e:	8c 93       	st	X, r24
    1070:	83 c0       	rjmp	.+262    	; 0x1178 <DIO_write+0x1b8>
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	a1 f4       	brne	.+40     	; 0x10a0 <DIO_write+0xe0>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
    1078:	a8 e3       	ldi	r26, 0x38	; 56
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e8 e3       	ldi	r30, 0x38	; 56
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	48 2f       	mov	r20, r24
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <DIO_write+0xd6>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <DIO_write+0xd2>
    109a:	84 2b       	or	r24, r20
    109c:	8c 93       	st	X, r24
    109e:	6c c0       	rjmp	.+216    	; 0x1178 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
    10a0:	a8 e3       	ldi	r26, 0x38	; 56
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e8 e3       	ldi	r30, 0x38	; 56
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 2e       	mov	r0, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <DIO_write+0xfe>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <DIO_write+0xfa>
    10c2:	80 95       	com	r24
    10c4:	84 23       	and	r24, r20
    10c6:	8c 93       	st	X, r24
    10c8:	57 c0       	rjmp	.+174    	; 0x1178 <DIO_write+0x1b8>
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	a1 f4       	brne	.+40     	; 0x10f8 <DIO_write+0x138>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
    10d0:	a5 e3       	ldi	r26, 0x35	; 53
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e5 e3       	ldi	r30, 0x35	; 53
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	48 2f       	mov	r20, r24
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 2e       	mov	r0, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <DIO_write+0x12e>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	0a 94       	dec	r0
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <DIO_write+0x12a>
    10f2:	84 2b       	or	r24, r20
    10f4:	8c 93       	st	X, r24
    10f6:	40 c0       	rjmp	.+128    	; 0x1178 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
    10f8:	a5 e3       	ldi	r26, 0x35	; 53
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e5 e3       	ldi	r30, 0x35	; 53
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	48 2f       	mov	r20, r24
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 2e       	mov	r0, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <DIO_write+0x156>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	0a 94       	dec	r0
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <DIO_write+0x152>
    111a:	80 95       	com	r24
    111c:	84 23       	and	r24, r20
    111e:	8c 93       	st	X, r24
    1120:	2b c0       	rjmp	.+86     	; 0x1178 <DIO_write+0x1b8>
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	a1 f4       	brne	.+40     	; 0x1150 <DIO_write+0x190>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
    1128:	a2 e3       	ldi	r26, 0x32	; 50
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e2 e3       	ldi	r30, 0x32	; 50
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_write+0x186>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <DIO_write+0x182>
    114a:	84 2b       	or	r24, r20
    114c:	8c 93       	st	X, r24
    114e:	14 c0       	rjmp	.+40     	; 0x1178 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
    1150:	a2 e3       	ldi	r26, 0x32	; 50
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e2 e3       	ldi	r30, 0x32	; 50
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_write+0x1ae>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_write+0x1aa>
    1172:	80 95       	com	r24
    1174:	84 23       	and	r24, r20
    1176:	8c 93       	st	X, r24
		}
		break ;
		default: break ;
	}
}
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	cf 91       	pop	r28
    1184:	df 91       	pop	r29
    1186:	08 95       	ret

00001188 <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	00 d0       	rcall	.+0      	; 0x118e <DIO_u8read+0x6>
    118e:	00 d0       	rcall	.+0      	; 0x1190 <DIO_u8read+0x8>
    1190:	0f 92       	push	r0
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	8a 83       	std	Y+2, r24	; 0x02
    1198:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char return_value=0;
    119a:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	3d 83       	std	Y+5, r19	; 0x05
    11a4:	2c 83       	std	Y+4, r18	; 0x04
    11a6:	4c 81       	ldd	r20, Y+4	; 0x04
    11a8:	5d 81       	ldd	r21, Y+5	; 0x05
    11aa:	42 34       	cpi	r20, 0x42	; 66
    11ac:	51 05       	cpc	r21, r1
    11ae:	b1 f1       	breq	.+108    	; 0x121c <DIO_u8read+0x94>
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
    11b2:	9d 81       	ldd	r25, Y+5	; 0x05
    11b4:	83 34       	cpi	r24, 0x43	; 67
    11b6:	91 05       	cpc	r25, r1
    11b8:	34 f4       	brge	.+12     	; 0x11c6 <DIO_u8read+0x3e>
    11ba:	2c 81       	ldd	r18, Y+4	; 0x04
    11bc:	3d 81       	ldd	r19, Y+5	; 0x05
    11be:	21 34       	cpi	r18, 0x41	; 65
    11c0:	31 05       	cpc	r19, r1
    11c2:	71 f0       	breq	.+28     	; 0x11e0 <DIO_u8read+0x58>
    11c4:	84 c0       	rjmp	.+264    	; 0x12ce <DIO_u8read+0x146>
    11c6:	4c 81       	ldd	r20, Y+4	; 0x04
    11c8:	5d 81       	ldd	r21, Y+5	; 0x05
    11ca:	43 34       	cpi	r20, 0x43	; 67
    11cc:	51 05       	cpc	r21, r1
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <DIO_u8read+0x4a>
    11d0:	43 c0       	rjmp	.+134    	; 0x1258 <DIO_u8read+0xd0>
    11d2:	8c 81       	ldd	r24, Y+4	; 0x04
    11d4:	9d 81       	ldd	r25, Y+5	; 0x05
    11d6:	84 34       	cpi	r24, 0x44	; 68
    11d8:	91 05       	cpc	r25, r1
    11da:	09 f4       	brne	.+2      	; 0x11de <DIO_u8read+0x56>
    11dc:	5b c0       	rjmp	.+182    	; 0x1294 <DIO_u8read+0x10c>
    11de:	77 c0       	rjmp	.+238    	; 0x12ce <DIO_u8read+0x146>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
    11e0:	e9 e3       	ldi	r30, 0x39	; 57
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	48 2f       	mov	r20, r24
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <DIO_u8read+0x72>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	2a 95       	dec	r18
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <DIO_u8read+0x6e>
    11fe:	9a 01       	movw	r18, r20
    1200:	28 23       	and	r18, r24
    1202:	39 23       	and	r19, r25
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	88 2f       	mov	r24, r24
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	a9 01       	movw	r20, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <DIO_u8read+0x8a>
    120e:	55 95       	asr	r21
    1210:	47 95       	ror	r20
    1212:	8a 95       	dec	r24
    1214:	e2 f7       	brpl	.-8      	; 0x120e <DIO_u8read+0x86>
    1216:	ca 01       	movw	r24, r20
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	59 c0       	rjmp	.+178    	; 0x12ce <DIO_u8read+0x146>
		break;
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
    121c:	e6 e3       	ldi	r30, 0x36	; 54
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <DIO_u8read+0xae>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	2a 95       	dec	r18
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <DIO_u8read+0xaa>
    123a:	9a 01       	movw	r18, r20
    123c:	28 23       	and	r18, r24
    123e:	39 23       	and	r19, r25
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	88 2f       	mov	r24, r24
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	a9 01       	movw	r20, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <DIO_u8read+0xc6>
    124a:	55 95       	asr	r21
    124c:	47 95       	ror	r20
    124e:	8a 95       	dec	r24
    1250:	e2 f7       	brpl	.-8      	; 0x124a <DIO_u8read+0xc2>
    1252:	ca 01       	movw	r24, r20
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	3b c0       	rjmp	.+118    	; 0x12ce <DIO_u8read+0x146>
		break;
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
    1258:	e3 e3       	ldi	r30, 0x33	; 51
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	48 2f       	mov	r20, r24
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <DIO_u8read+0xea>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	2a 95       	dec	r18
    1274:	e2 f7       	brpl	.-8      	; 0x126e <DIO_u8read+0xe6>
    1276:	9a 01       	movw	r18, r20
    1278:	28 23       	and	r18, r24
    127a:	39 23       	and	r19, r25
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	88 2f       	mov	r24, r24
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	a9 01       	movw	r20, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_u8read+0x102>
    1286:	55 95       	asr	r21
    1288:	47 95       	ror	r20
    128a:	8a 95       	dec	r24
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <DIO_u8read+0xfe>
    128e:	ca 01       	movw	r24, r20
    1290:	89 83       	std	Y+1, r24	; 0x01
    1292:	1d c0       	rjmp	.+58     	; 0x12ce <DIO_u8read+0x146>
		break;
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
    1294:	e0 e3       	ldi	r30, 0x30	; 48
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	50 e0       	ldi	r21, 0x00	; 0
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <DIO_u8read+0x126>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	2a 95       	dec	r18
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <DIO_u8read+0x122>
    12b2:	9a 01       	movw	r18, r20
    12b4:	28 23       	and	r18, r24
    12b6:	39 23       	and	r19, r25
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	a9 01       	movw	r20, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <DIO_u8read+0x13e>
    12c2:	55 95       	asr	r21
    12c4:	47 95       	ror	r20
    12c6:	8a 95       	dec	r24
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <DIO_u8read+0x13a>
    12ca:	ca 01       	movw	r24, r20
    12cc:	89 83       	std	Y+1, r24	; 0x01
		break;
		default: 
		break;
	}
	return return_value ;
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <DIO_toggle+0x6>
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <DIO_toggle+0x8>
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	89 83       	std	Y+1, r24	; 0x01
    12ee:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	3c 83       	std	Y+4, r19	; 0x04
    12f8:	2b 83       	std	Y+3, r18	; 0x03
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	82 34       	cpi	r24, 0x42	; 66
    1300:	91 05       	cpc	r25, r1
    1302:	51 f1       	breq	.+84     	; 0x1358 <DIO_toggle+0x78>
    1304:	2b 81       	ldd	r18, Y+3	; 0x03
    1306:	3c 81       	ldd	r19, Y+4	; 0x04
    1308:	23 34       	cpi	r18, 0x43	; 67
    130a:	31 05       	cpc	r19, r1
    130c:	34 f4       	brge	.+12     	; 0x131a <DIO_toggle+0x3a>
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	81 34       	cpi	r24, 0x41	; 65
    1314:	91 05       	cpc	r25, r1
    1316:	61 f0       	breq	.+24     	; 0x1330 <DIO_toggle+0x50>
    1318:	5a c0       	rjmp	.+180    	; 0x13ce <DIO_toggle+0xee>
    131a:	2b 81       	ldd	r18, Y+3	; 0x03
    131c:	3c 81       	ldd	r19, Y+4	; 0x04
    131e:	23 34       	cpi	r18, 0x43	; 67
    1320:	31 05       	cpc	r19, r1
    1322:	71 f1       	breq	.+92     	; 0x1380 <DIO_toggle+0xa0>
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	9c 81       	ldd	r25, Y+4	; 0x04
    1328:	84 34       	cpi	r24, 0x44	; 68
    132a:	91 05       	cpc	r25, r1
    132c:	e9 f1       	breq	.+122    	; 0x13a8 <DIO_toggle+0xc8>
    132e:	4f c0       	rjmp	.+158    	; 0x13ce <DIO_toggle+0xee>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
    1330:	ab e3       	ldi	r26, 0x3B	; 59
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	eb e3       	ldi	r30, 0x3B	; 59
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <DIO_toggle+0x6e>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <DIO_toggle+0x6a>
    1352:	84 27       	eor	r24, r20
    1354:	8c 93       	st	X, r24
    1356:	3b c0       	rjmp	.+118    	; 0x13ce <DIO_toggle+0xee>
		break;
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
    1358:	a8 e3       	ldi	r26, 0x38	; 56
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e8 e3       	ldi	r30, 0x38	; 56
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIO_toggle+0x96>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <DIO_toggle+0x92>
    137a:	84 27       	eor	r24, r20
    137c:	8c 93       	st	X, r24
    137e:	27 c0       	rjmp	.+78     	; 0x13ce <DIO_toggle+0xee>
		break;
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
    1380:	a5 e3       	ldi	r26, 0x35	; 53
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e5 e3       	ldi	r30, 0x35	; 53
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 2e       	mov	r0, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_toggle+0xbe>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	0a 94       	dec	r0
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <DIO_toggle+0xba>
    13a2:	84 27       	eor	r24, r20
    13a4:	8c 93       	st	X, r24
    13a6:	13 c0       	rjmp	.+38     	; 0x13ce <DIO_toggle+0xee>
		break;
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
    13a8:	a2 e3       	ldi	r26, 0x32	; 50
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e2 e3       	ldi	r30, 0x32	; 50
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_toggle+0xe6>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_toggle+0xe2>
    13ca:	84 27       	eor	r24, r20
    13cc:	8c 93       	st	X, r24
		break;
		default: break;
	}
}
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <DIO_set_port_direction>:
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <DIO_set_port_direction+0x6>
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <DIO_set_port_direction+0x8>
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	89 83       	std	Y+1, r24	; 0x01
    13ea:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	3c 83       	std	Y+4, r19	; 0x04
    13f4:	2b 83       	std	Y+3, r18	; 0x03
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	9c 81       	ldd	r25, Y+4	; 0x04
    13fa:	82 34       	cpi	r24, 0x42	; 66
    13fc:	91 05       	cpc	r25, r1
    13fe:	d9 f0       	breq	.+54     	; 0x1436 <DIO_set_port_direction+0x5a>
    1400:	2b 81       	ldd	r18, Y+3	; 0x03
    1402:	3c 81       	ldd	r19, Y+4	; 0x04
    1404:	23 34       	cpi	r18, 0x43	; 67
    1406:	31 05       	cpc	r19, r1
    1408:	34 f4       	brge	.+12     	; 0x1416 <DIO_set_port_direction+0x3a>
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
    140e:	81 34       	cpi	r24, 0x41	; 65
    1410:	91 05       	cpc	r25, r1
    1412:	61 f0       	breq	.+24     	; 0x142c <DIO_set_port_direction+0x50>
    1414:	1e c0       	rjmp	.+60     	; 0x1452 <DIO_set_port_direction+0x76>
    1416:	2b 81       	ldd	r18, Y+3	; 0x03
    1418:	3c 81       	ldd	r19, Y+4	; 0x04
    141a:	23 34       	cpi	r18, 0x43	; 67
    141c:	31 05       	cpc	r19, r1
    141e:	81 f0       	breq	.+32     	; 0x1440 <DIO_set_port_direction+0x64>
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	84 34       	cpi	r24, 0x44	; 68
    1426:	91 05       	cpc	r25, r1
    1428:	81 f0       	breq	.+32     	; 0x144a <DIO_set_port_direction+0x6e>
    142a:	13 c0       	rjmp	.+38     	; 0x1452 <DIO_set_port_direction+0x76>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
    142c:	ea e3       	ldi	r30, 0x3A	; 58
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	80 83       	st	Z, r24
    1434:	0e c0       	rjmp	.+28     	; 0x1452 <DIO_set_port_direction+0x76>
		break ;
		case 'B':
		DDRB=direction; //set the direction of port B
    1436:	e7 e3       	ldi	r30, 0x37	; 55
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	80 83       	st	Z, r24
    143e:	09 c0       	rjmp	.+18     	; 0x1452 <DIO_set_port_direction+0x76>
		break ;
		case 'C' :
		DDRC=direction; //set the direction of port C
    1440:	e4 e3       	ldi	r30, 0x34	; 52
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	80 83       	st	Z, r24
    1448:	04 c0       	rjmp	.+8      	; 0x1452 <DIO_set_port_direction+0x76>
		break ;
		case 'D':
		DDRD=direction; //set the direction of port D
    144a:	e1 e3       	ldi	r30, 0x31	; 49
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	80 83       	st	Z, r24
		break ;
		default:
		break ;
	}
	
}
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <DIO_write_port>:
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <DIO_write_port+0x6>
    1466:	00 d0       	rcall	.+0      	; 0x1468 <DIO_write_port+0x8>
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	3c 83       	std	Y+4, r19	; 0x04
    1478:	2b 83       	std	Y+3, r18	; 0x03
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	9c 81       	ldd	r25, Y+4	; 0x04
    147e:	82 34       	cpi	r24, 0x42	; 66
    1480:	91 05       	cpc	r25, r1
    1482:	d9 f0       	breq	.+54     	; 0x14ba <DIO_write_port+0x5a>
    1484:	2b 81       	ldd	r18, Y+3	; 0x03
    1486:	3c 81       	ldd	r19, Y+4	; 0x04
    1488:	23 34       	cpi	r18, 0x43	; 67
    148a:	31 05       	cpc	r19, r1
    148c:	34 f4       	brge	.+12     	; 0x149a <DIO_write_port+0x3a>
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	9c 81       	ldd	r25, Y+4	; 0x04
    1492:	81 34       	cpi	r24, 0x41	; 65
    1494:	91 05       	cpc	r25, r1
    1496:	61 f0       	breq	.+24     	; 0x14b0 <DIO_write_port+0x50>
    1498:	1e c0       	rjmp	.+60     	; 0x14d6 <DIO_write_port+0x76>
    149a:	2b 81       	ldd	r18, Y+3	; 0x03
    149c:	3c 81       	ldd	r19, Y+4	; 0x04
    149e:	23 34       	cpi	r18, 0x43	; 67
    14a0:	31 05       	cpc	r19, r1
    14a2:	81 f0       	breq	.+32     	; 0x14c4 <DIO_write_port+0x64>
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	9c 81       	ldd	r25, Y+4	; 0x04
    14a8:	84 34       	cpi	r24, 0x44	; 68
    14aa:	91 05       	cpc	r25, r1
    14ac:	81 f0       	breq	.+32     	; 0x14ce <DIO_write_port+0x6e>
    14ae:	13 c0       	rjmp	.+38     	; 0x14d6 <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
    14b0:	eb e3       	ldi	r30, 0x3B	; 59
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	80 83       	st	Z, r24
    14b8:	0e c0       	rjmp	.+28     	; 0x14d6 <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
    14ba:	e8 e3       	ldi	r30, 0x38	; 56
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	80 83       	st	Z, r24
    14c2:	09 c0       	rjmp	.+18     	; 0x14d6 <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
    14c4:	e5 e3       	ldi	r30, 0x35	; 53
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	80 83       	st	Z, r24
    14cc:	04 c0       	rjmp	.+8      	; 0x14d6 <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
    14ce:	e2 e3       	ldi	r30, 0x32	; 50
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	80 83       	st	Z, r24
		break ;
		default:
		 break ;
	}
}
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <DIO_read_port>:

unsigned char DIO_read_port(unsigned char portname)
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <DIO_read_port+0x6>
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <DIO_read_port+0x8>
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char return_val=0;
    14f2:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	3c 83       	std	Y+4, r19	; 0x04
    14fc:	2b 83       	std	Y+3, r18	; 0x03
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	82 34       	cpi	r24, 0x42	; 66
    1504:	91 05       	cpc	r25, r1
    1506:	d9 f0       	breq	.+54     	; 0x153e <DIO_read_port+0x5a>
    1508:	2b 81       	ldd	r18, Y+3	; 0x03
    150a:	3c 81       	ldd	r19, Y+4	; 0x04
    150c:	23 34       	cpi	r18, 0x43	; 67
    150e:	31 05       	cpc	r19, r1
    1510:	34 f4       	brge	.+12     	; 0x151e <DIO_read_port+0x3a>
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	9c 81       	ldd	r25, Y+4	; 0x04
    1516:	81 34       	cpi	r24, 0x41	; 65
    1518:	91 05       	cpc	r25, r1
    151a:	61 f0       	breq	.+24     	; 0x1534 <DIO_read_port+0x50>
    151c:	1e c0       	rjmp	.+60     	; 0x155a <DIO_read_port+0x76>
    151e:	2b 81       	ldd	r18, Y+3	; 0x03
    1520:	3c 81       	ldd	r19, Y+4	; 0x04
    1522:	23 34       	cpi	r18, 0x43	; 67
    1524:	31 05       	cpc	r19, r1
    1526:	81 f0       	breq	.+32     	; 0x1548 <DIO_read_port+0x64>
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	9c 81       	ldd	r25, Y+4	; 0x04
    152c:	84 34       	cpi	r24, 0x44	; 68
    152e:	91 05       	cpc	r25, r1
    1530:	81 f0       	breq	.+32     	; 0x1552 <DIO_read_port+0x6e>
    1532:	13 c0       	rjmp	.+38     	; 0x155a <DIO_read_port+0x76>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
    1534:	e9 e3       	ldi	r30, 0x39	; 57
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	0e c0       	rjmp	.+28     	; 0x155a <DIO_read_port+0x76>
		break ;
		case 'B':
		return_val=PINB; // read the value of port B 
    153e:	e6 e3       	ldi	r30, 0x36	; 54
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	89 83       	std	Y+1, r24	; 0x01
    1546:	09 c0       	rjmp	.+18     	; 0x155a <DIO_read_port+0x76>
		break ;
		case 'C' :
		return_val=PINC; // read the value of port C 
    1548:	e3 e3       	ldi	r30, 0x33	; 51
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	04 c0       	rjmp	.+8      	; 0x155a <DIO_read_port+0x76>
		break ;
		case 'D':
		return_val=PIND; // read the value of port D 
    1552:	e0 e3       	ldi	r30, 0x30	; 48
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	89 83       	std	Y+1, r24	; 0x01
		break ;
		default:
		break ;
	}
	return return_val;
    155a:	89 81       	ldd	r24, Y+1	; 0x01
}
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	00 d0       	rcall	.+0      	; 0x1570 <DIO_vconnectpullup+0x6>
    1570:	00 d0       	rcall	.+0      	; 0x1572 <DIO_vconnectpullup+0x8>
    1572:	0f 92       	push	r0
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	89 83       	std	Y+1, r24	; 0x01
    157a:	6a 83       	std	Y+2, r22	; 0x02
    157c:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	3d 83       	std	Y+5, r19	; 0x05
    1586:	2c 83       	std	Y+4, r18	; 0x04
    1588:	8c 81       	ldd	r24, Y+4	; 0x04
    158a:	9d 81       	ldd	r25, Y+5	; 0x05
    158c:	82 34       	cpi	r24, 0x42	; 66
    158e:	91 05       	cpc	r25, r1
    1590:	09 f4       	brne	.+2      	; 0x1594 <DIO_vconnectpullup+0x2a>
    1592:	44 c0       	rjmp	.+136    	; 0x161c <DIO_vconnectpullup+0xb2>
    1594:	2c 81       	ldd	r18, Y+4	; 0x04
    1596:	3d 81       	ldd	r19, Y+5	; 0x05
    1598:	23 34       	cpi	r18, 0x43	; 67
    159a:	31 05       	cpc	r19, r1
    159c:	34 f4       	brge	.+12     	; 0x15aa <DIO_vconnectpullup+0x40>
    159e:	8c 81       	ldd	r24, Y+4	; 0x04
    15a0:	9d 81       	ldd	r25, Y+5	; 0x05
    15a2:	81 34       	cpi	r24, 0x41	; 65
    15a4:	91 05       	cpc	r25, r1
    15a6:	71 f0       	breq	.+28     	; 0x15c4 <DIO_vconnectpullup+0x5a>
    15a8:	bc c0       	rjmp	.+376    	; 0x1722 <DIO_vconnectpullup+0x1b8>
    15aa:	2c 81       	ldd	r18, Y+4	; 0x04
    15ac:	3d 81       	ldd	r19, Y+5	; 0x05
    15ae:	23 34       	cpi	r18, 0x43	; 67
    15b0:	31 05       	cpc	r19, r1
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <DIO_vconnectpullup+0x4c>
    15b4:	5f c0       	rjmp	.+190    	; 0x1674 <DIO_vconnectpullup+0x10a>
    15b6:	8c 81       	ldd	r24, Y+4	; 0x04
    15b8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ba:	84 34       	cpi	r24, 0x44	; 68
    15bc:	91 05       	cpc	r25, r1
    15be:	09 f4       	brne	.+2      	; 0x15c2 <DIO_vconnectpullup+0x58>
    15c0:	85 c0       	rjmp	.+266    	; 0x16cc <DIO_vconnectpullup+0x162>
    15c2:	af c0       	rjmp	.+350    	; 0x1722 <DIO_vconnectpullup+0x1b8>
	{
		case 'A':
		if(connect_pullup==1)
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	a1 f4       	brne	.+40     	; 0x15f2 <DIO_vconnectpullup+0x88>
		{
			SET_BIT(PORTA,pinnumber);
    15ca:	ab e3       	ldi	r26, 0x3B	; 59
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	eb e3       	ldi	r30, 0x3B	; 59
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	48 2f       	mov	r20, r24
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 2e       	mov	r0, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <DIO_vconnectpullup+0x7e>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	0a 94       	dec	r0
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <DIO_vconnectpullup+0x7a>
    15ec:	84 2b       	or	r24, r20
    15ee:	8c 93       	st	X, r24
    15f0:	98 c0       	rjmp	.+304    	; 0x1722 <DIO_vconnectpullup+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
    15f2:	ab e3       	ldi	r26, 0x3B	; 59
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	eb e3       	ldi	r30, 0x3B	; 59
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	48 2f       	mov	r20, r24
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 2e       	mov	r0, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <DIO_vconnectpullup+0xa6>
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	0a 94       	dec	r0
    1612:	e2 f7       	brpl	.-8      	; 0x160c <DIO_vconnectpullup+0xa2>
    1614:	80 95       	com	r24
    1616:	84 23       	and	r24, r20
    1618:	8c 93       	st	X, r24
    161a:	83 c0       	rjmp	.+262    	; 0x1722 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'B':
		if(connect_pullup==1)
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	81 30       	cpi	r24, 0x01	; 1
    1620:	a1 f4       	brne	.+40     	; 0x164a <DIO_vconnectpullup+0xe0>
		{
			SET_BIT(PORTB,pinnumber);
    1622:	a8 e3       	ldi	r26, 0x38	; 56
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e8 e3       	ldi	r30, 0x38	; 56
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 2e       	mov	r0, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <DIO_vconnectpullup+0xd6>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	0a 94       	dec	r0
    1642:	e2 f7       	brpl	.-8      	; 0x163c <DIO_vconnectpullup+0xd2>
    1644:	84 2b       	or	r24, r20
    1646:	8c 93       	st	X, r24
    1648:	6c c0       	rjmp	.+216    	; 0x1722 <DIO_vconnectpullup+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
    164a:	a8 e3       	ldi	r26, 0x38	; 56
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e8 e3       	ldi	r30, 0x38	; 56
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	48 2f       	mov	r20, r24
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 2e       	mov	r0, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <DIO_vconnectpullup+0xfe>
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	0a 94       	dec	r0
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <DIO_vconnectpullup+0xfa>
    166c:	80 95       	com	r24
    166e:	84 23       	and	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	57 c0       	rjmp	.+174    	; 0x1722 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'C':
		if(connect_pullup==1)
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	a1 f4       	brne	.+40     	; 0x16a2 <DIO_vconnectpullup+0x138>
		{
			SET_BIT(PORTC,pinnumber);
    167a:	a5 e3       	ldi	r26, 0x35	; 53
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e5 e3       	ldi	r30, 0x35	; 53
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <DIO_vconnectpullup+0x12e>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <DIO_vconnectpullup+0x12a>
    169c:	84 2b       	or	r24, r20
    169e:	8c 93       	st	X, r24
    16a0:	40 c0       	rjmp	.+128    	; 0x1722 <DIO_vconnectpullup+0x1b8>
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
    16a2:	a5 e3       	ldi	r26, 0x35	; 53
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e5 e3       	ldi	r30, 0x35	; 53
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	48 2f       	mov	r20, r24
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 2e       	mov	r0, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <DIO_vconnectpullup+0x156>
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	0a 94       	dec	r0
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <DIO_vconnectpullup+0x152>
    16c4:	80 95       	com	r24
    16c6:	84 23       	and	r24, r20
    16c8:	8c 93       	st	X, r24
    16ca:	2b c0       	rjmp	.+86     	; 0x1722 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'D':
		if(connect_pullup==1)
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	a1 f4       	brne	.+40     	; 0x16fa <DIO_vconnectpullup+0x190>
		{
			SET_BIT(PORTD,pinnumber);
    16d2:	a2 e3       	ldi	r26, 0x32	; 50
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e2 e3       	ldi	r30, 0x32	; 50
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	48 2f       	mov	r20, r24
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	02 2e       	mov	r0, r18
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <DIO_vconnectpullup+0x186>
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	0a 94       	dec	r0
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <DIO_vconnectpullup+0x182>
    16f4:	84 2b       	or	r24, r20
    16f6:	8c 93       	st	X, r24
    16f8:	14 c0       	rjmp	.+40     	; 0x1722 <DIO_vconnectpullup+0x1b8>
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
    16fa:	a2 e3       	ldi	r26, 0x32	; 50
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e2 e3       	ldi	r30, 0x32	; 50
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	48 2f       	mov	r20, r24
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	02 2e       	mov	r0, r18
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <DIO_vconnectpullup+0x1ae>
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	0a 94       	dec	r0
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <DIO_vconnectpullup+0x1aa>
    171c:	80 95       	com	r24
    171e:	84 23       	and	r24, r20
    1720:	8c 93       	st	X, r24
		}
		break;
		
	}
}
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <write_low_nibble>:

void write_low_nibble(unsigned char portname,unsigned char value)
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	00 d0       	rcall	.+0      	; 0x1738 <write_low_nibble+0x6>
    1738:	00 d0       	rcall	.+0      	; 0x173a <write_low_nibble+0x8>
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	8f 70       	andi	r24, 0x0F	; 15
    1746:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	3c 83       	std	Y+4, r19	; 0x04
    1750:	2b 83       	std	Y+3, r18	; 0x03
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	9c 81       	ldd	r25, Y+4	; 0x04
    1756:	82 34       	cpi	r24, 0x42	; 66
    1758:	91 05       	cpc	r25, r1
    175a:	29 f1       	breq	.+74     	; 0x17a6 <write_low_nibble+0x74>
    175c:	2b 81       	ldd	r18, Y+3	; 0x03
    175e:	3c 81       	ldd	r19, Y+4	; 0x04
    1760:	23 34       	cpi	r18, 0x43	; 67
    1762:	31 05       	cpc	r19, r1
    1764:	34 f4       	brge	.+12     	; 0x1772 <write_low_nibble+0x40>
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	9c 81       	ldd	r25, Y+4	; 0x04
    176a:	81 34       	cpi	r24, 0x41	; 65
    176c:	91 05       	cpc	r25, r1
    176e:	61 f0       	breq	.+24     	; 0x1788 <write_low_nibble+0x56>
    1770:	47 c0       	rjmp	.+142    	; 0x1800 <write_low_nibble+0xce>
    1772:	2b 81       	ldd	r18, Y+3	; 0x03
    1774:	3c 81       	ldd	r19, Y+4	; 0x04
    1776:	23 34       	cpi	r18, 0x43	; 67
    1778:	31 05       	cpc	r19, r1
    177a:	21 f1       	breq	.+72     	; 0x17c4 <write_low_nibble+0x92>
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	9c 81       	ldd	r25, Y+4	; 0x04
    1780:	84 34       	cpi	r24, 0x44	; 68
    1782:	91 05       	cpc	r25, r1
    1784:	71 f1       	breq	.+92     	; 0x17e2 <write_low_nibble+0xb0>
    1786:	3c c0       	rjmp	.+120    	; 0x1800 <write_low_nibble+0xce>
	{
		case 'A':
		PORTA&=0xf0;
    1788:	ab e3       	ldi	r26, 0x3B	; 59
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	eb e3       	ldi	r30, 0x3B	; 59
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	80 7f       	andi	r24, 0xF0	; 240
    1794:	8c 93       	st	X, r24
		PORTA|=value;
    1796:	ab e3       	ldi	r26, 0x3B	; 59
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	eb e3       	ldi	r30, 0x3B	; 59
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	90 81       	ld	r25, Z
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	89 2b       	or	r24, r25
    17a4:	8c 93       	st	X, r24
		case 'B':
		PORTB&=0xf0;
    17a6:	a8 e3       	ldi	r26, 0x38	; 56
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e8 e3       	ldi	r30, 0x38	; 56
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	80 7f       	andi	r24, 0xF0	; 240
    17b2:	8c 93       	st	X, r24
		PORTB|=value;
    17b4:	a8 e3       	ldi	r26, 0x38	; 56
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e8 e3       	ldi	r30, 0x38	; 56
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	90 81       	ld	r25, Z
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	89 2b       	or	r24, r25
    17c2:	8c 93       	st	X, r24
		case 'C':
		PORTC&=0xf0;
    17c4:	a5 e3       	ldi	r26, 0x35	; 53
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e5 e3       	ldi	r30, 0x35	; 53
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	80 7f       	andi	r24, 0xF0	; 240
    17d0:	8c 93       	st	X, r24
		PORTC|=value;
    17d2:	a5 e3       	ldi	r26, 0x35	; 53
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e5 e3       	ldi	r30, 0x35	; 53
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	90 81       	ld	r25, Z
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	89 2b       	or	r24, r25
    17e0:	8c 93       	st	X, r24
		case 'D':
		PORTD&=0xf0;
    17e2:	a2 e3       	ldi	r26, 0x32	; 50
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e2 e3       	ldi	r30, 0x32	; 50
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	80 7f       	andi	r24, 0xF0	; 240
    17ee:	8c 93       	st	X, r24
		PORTD|=value;
    17f0:	a2 e3       	ldi	r26, 0x32	; 50
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e2 e3       	ldi	r30, 0x32	; 50
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	90 81       	ld	r25, Z
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	89 2b       	or	r24, r25
    17fe:	8c 93       	st	X, r24
	}
}
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <write_high_nibble>:

void write_high_nibble(unsigned char portname,unsigned char value)
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	00 d0       	rcall	.+0      	; 0x1814 <write_high_nibble+0x6>
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	6a 83       	std	Y+2, r22	; 0x02
	value<<=3;
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	88 0f       	add	r24, r24
    1820:	88 0f       	add	r24, r24
    1822:	88 0f       	add	r24, r24
    1824:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	88 2f       	mov	r24, r24
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	81 34       	cpi	r24, 0x41	; 65
    182e:	91 05       	cpc	r25, r1
    1830:	79 f4       	brne	.+30     	; 0x1850 <write_high_nibble+0x42>
	{
		case 'A':
		PORTA&=0x07;
    1832:	ab e3       	ldi	r26, 0x3B	; 59
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	eb e3       	ldi	r30, 0x3B	; 59
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	87 70       	andi	r24, 0x07	; 7
    183e:	8c 93       	st	X, r24
		PORTA|=value;
    1840:	ab e3       	ldi	r26, 0x3B	; 59
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	eb e3       	ldi	r30, 0x3B	; 59
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	90 81       	ld	r25, Z
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	89 2b       	or	r24, r25
    184e:	8c 93       	st	X, r24
//		PORTC|=value;
//		case 'D':
//		PORTD&=0x07;
//		PORTD|=value;
	}
}
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <main>:
#include <avr/interrupt.h>
void ADC_INIT();
uint8_t ADC_READ(uint8_t);
unsigned short a,b,high,distance;
int main(void)
{
    185a:	ef 92       	push	r14
    185c:	ff 92       	push	r15
    185e:	0f 93       	push	r16
    1860:	1f 93       	push	r17
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	c6 54       	subi	r28, 0x46	; 70
    186c:	d0 40       	sbci	r29, 0x00	; 0
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	de bf       	out	0x3e, r29	; 62
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	cd bf       	out	0x3d, r28	; 61

	//LM35
	uint8_t d;
	float v, t;
	DIO_vsetPINDir('C',7,1); //Set Fan as Output
    1878:	83 e4       	ldi	r24, 0x43	; 67
    187a:	67 e0       	ldi	r22, 0x07	; 7
    187c:	41 e0       	ldi	r20, 0x01	; 1
    187e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vsetPINDir>
	ADC_INIT();
    1882:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <ADC_INIT>

	//ultrasonic
	LCD_vInit();
    1886:	0e 94 ce 10 	call	0x219c	; 0x219c <LCD_vInit>

	DIO_vsetPINDir('D',7,1);
    188a:	84 e4       	ldi	r24, 0x44	; 68
    188c:	67 e0       	ldi	r22, 0x07	; 7
    188e:	41 e0       	ldi	r20, 0x01	; 1
    1890:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vsetPINDir>
	//=================================
		//INTERRUPT

			INT0_Init();			//Enable External Interrupt
    1894:	0e 94 40 10 	call	0x2080	; 0x2080 <INT0_Init>
			INT1_Init();
    1898:	0e 94 a4 10 	call	0x2148	; 0x2148 <INT1_Init>
			sei();
    189c:	78 94       	sei

	DIO_vsetPINDir('C',2,1); //Configure PD1 as output of interrupt
    189e:	83 e4       	ldi	r24, 0x43	; 67
    18a0:	62 e0       	ldi	r22, 0x02	; 2
    18a2:	41 e0       	ldi	r20, 0x01	; 1
    18a4:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vsetPINDir>

//===========================
//	//LDR
	DDRB=0x1C;
    18a8:	e7 e3       	ldi	r30, 0x37	; 55
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	8c e1       	ldi	r24, 0x1C	; 28
    18ae:	80 83       	st	Z, r24
		PORTB=0x00;
    18b0:	e8 e3       	ldi	r30, 0x38	; 56
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	10 82       	st	Z, r1
		float i =0;
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	a0 e0       	ldi	r26, 0x00	; 0
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	8a af       	std	Y+58, r24	; 0x3a
    18c0:	9b af       	std	Y+59, r25	; 0x3b
    18c2:	ac af       	std	Y+60, r26	; 0x3c
    18c4:	bd af       	std	Y+61, r27	; 0x3d
		float LDR= 0;  //digital output
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	a0 e0       	ldi	r26, 0x00	; 0
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	8e ab       	std	Y+54, r24	; 0x36
    18d0:	9f ab       	std	Y+55, r25	; 0x37
    18d2:	a8 af       	std	Y+56, r26	; 0x38
    18d4:	b9 af       	std	Y+57, r27	; 0x39


    while(1)
    {
		//ultrasonic
		TCCR1A = 0;
    18d6:	ef e4       	ldi	r30, 0x4F	; 79
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	10 82       	st	Z, r1
		TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag)  */
    18dc:	e8 e5       	ldi	r30, 0x58	; 88
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 e2       	ldi	r24, 0x20	; 32
    18e2:	80 83       	st	Z, r24
		DIO_write('D',7,1);
    18e4:	84 e4       	ldi	r24, 0x44	; 68
    18e6:	67 e0       	ldi	r22, 0x07	; 7
    18e8:	41 e0       	ldi	r20, 0x01	; 1
    18ea:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <DIO_write>
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	a8 e4       	ldi	r26, 0x48	; 72
    18f4:	b2 e4       	ldi	r27, 0x42	; 66
    18f6:	89 ab       	std	Y+49, r24	; 0x31
    18f8:	9a ab       	std	Y+50, r25	; 0x32
    18fa:	ab ab       	std	Y+51, r26	; 0x33
    18fc:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1900:	7a a9       	ldd	r23, Y+50	; 0x32
    1902:	8b a9       	ldd	r24, Y+51	; 0x33
    1904:	9c a9       	ldd	r25, Y+52	; 0x34
    1906:	2b ea       	ldi	r18, 0xAB	; 171
    1908:	3a ea       	ldi	r19, 0xAA	; 170
    190a:	4a ea       	ldi	r20, 0xAA	; 170
    190c:	5e e3       	ldi	r21, 0x3E	; 62
    190e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	8d a7       	std	Y+45, r24	; 0x2d
    1918:	9e a7       	std	Y+46, r25	; 0x2e
    191a:	af a7       	std	Y+47, r26	; 0x2f
    191c:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    191e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1920:	7e a5       	ldd	r23, Y+46	; 0x2e
    1922:	8f a5       	ldd	r24, Y+47	; 0x2f
    1924:	98 a9       	ldd	r25, Y+48	; 0x30
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e8       	ldi	r20, 0x80	; 128
    192c:	5f e3       	ldi	r21, 0x3F	; 63
    192e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1932:	88 23       	and	r24, r24
    1934:	1c f4       	brge	.+6      	; 0x193c <main+0xe2>
		__ticks = 1;
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	8c a7       	std	Y+44, r24	; 0x2c
    193a:	91 c0       	rjmp	.+290    	; 0x1a5e <main+0x204>
	else if (__tmp > 255)
    193c:	6d a5       	ldd	r22, Y+45	; 0x2d
    193e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1940:	8f a5       	ldd	r24, Y+47	; 0x2f
    1942:	98 a9       	ldd	r25, Y+48	; 0x30
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	4f e7       	ldi	r20, 0x7F	; 127
    194a:	53 e4       	ldi	r21, 0x43	; 67
    194c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1950:	18 16       	cp	r1, r24
    1952:	0c f0       	brlt	.+2      	; 0x1956 <main+0xfc>
    1954:	7b c0       	rjmp	.+246    	; 0x1a4c <main+0x1f2>
	{
		_delay_ms(__us / 1000.0);
    1956:	69 a9       	ldd	r22, Y+49	; 0x31
    1958:	7a a9       	ldd	r23, Y+50	; 0x32
    195a:	8b a9       	ldd	r24, Y+51	; 0x33
    195c:	9c a9       	ldd	r25, Y+52	; 0x34
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	4a e7       	ldi	r20, 0x7A	; 122
    1964:	54 e4       	ldi	r21, 0x44	; 68
    1966:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	88 a7       	std	Y+40, r24	; 0x28
    1970:	99 a7       	std	Y+41, r25	; 0x29
    1972:	aa a7       	std	Y+42, r26	; 0x2a
    1974:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1976:	68 a5       	ldd	r22, Y+40	; 0x28
    1978:	79 a5       	ldd	r23, Y+41	; 0x29
    197a:	8a a5       	ldd	r24, Y+42	; 0x2a
    197c:	9b a5       	ldd	r25, Y+43	; 0x2b
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	4a e7       	ldi	r20, 0x7A	; 122
    1984:	53 e4       	ldi	r21, 0x43	; 67
    1986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	8c a3       	std	Y+36, r24	; 0x24
    1990:	9d a3       	std	Y+37, r25	; 0x25
    1992:	ae a3       	std	Y+38, r26	; 0x26
    1994:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    1996:	6c a1       	ldd	r22, Y+36	; 0x24
    1998:	7d a1       	ldd	r23, Y+37	; 0x25
    199a:	8e a1       	ldd	r24, Y+38	; 0x26
    199c:	9f a1       	ldd	r25, Y+39	; 0x27
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	40 e8       	ldi	r20, 0x80	; 128
    19a4:	5f e3       	ldi	r21, 0x3F	; 63
    19a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19aa:	88 23       	and	r24, r24
    19ac:	2c f4       	brge	.+10     	; 0x19b8 <main+0x15e>
		__ticks = 1;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	9b a3       	std	Y+35, r25	; 0x23
    19b4:	8a a3       	std	Y+34, r24	; 0x22
    19b6:	3f c0       	rjmp	.+126    	; 0x1a36 <main+0x1dc>
	else if (__tmp > 65535)
    19b8:	6c a1       	ldd	r22, Y+36	; 0x24
    19ba:	7d a1       	ldd	r23, Y+37	; 0x25
    19bc:	8e a1       	ldd	r24, Y+38	; 0x26
    19be:	9f a1       	ldd	r25, Y+39	; 0x27
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	3f ef       	ldi	r19, 0xFF	; 255
    19c4:	4f e7       	ldi	r20, 0x7F	; 127
    19c6:	57 e4       	ldi	r21, 0x47	; 71
    19c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19cc:	18 16       	cp	r1, r24
    19ce:	4c f5       	brge	.+82     	; 0x1a22 <main+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d0:	68 a5       	ldd	r22, Y+40	; 0x28
    19d2:	79 a5       	ldd	r23, Y+41	; 0x29
    19d4:	8a a5       	ldd	r24, Y+42	; 0x2a
    19d6:	9b a5       	ldd	r25, Y+43	; 0x2b
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e2       	ldi	r20, 0x20	; 32
    19de:	51 e4       	ldi	r21, 0x41	; 65
    19e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	bc 01       	movw	r22, r24
    19ea:	cd 01       	movw	r24, r26
    19ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	9b a3       	std	Y+35, r25	; 0x23
    19f6:	8a a3       	std	Y+34, r24	; 0x22
    19f8:	0f c0       	rjmp	.+30     	; 0x1a18 <main+0x1be>
    19fa:	89 e1       	ldi	r24, 0x19	; 25
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	99 a3       	std	Y+33, r25	; 0x21
    1a00:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a02:	88 a1       	ldd	r24, Y+32	; 0x20
    1a04:	99 a1       	ldd	r25, Y+33	; 0x21
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	f1 f7       	brne	.-4      	; 0x1a06 <main+0x1ac>
    1a0a:	99 a3       	std	Y+33, r25	; 0x21
    1a0c:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0e:	8a a1       	ldd	r24, Y+34	; 0x22
    1a10:	9b a1       	ldd	r25, Y+35	; 0x23
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	9b a3       	std	Y+35, r25	; 0x23
    1a16:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a18:	8a a1       	ldd	r24, Y+34	; 0x22
    1a1a:	9b a1       	ldd	r25, Y+35	; 0x23
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	69 f7       	brne	.-38     	; 0x19fa <main+0x1a0>
    1a20:	24 c0       	rjmp	.+72     	; 0x1a6a <main+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a22:	6c a1       	ldd	r22, Y+36	; 0x24
    1a24:	7d a1       	ldd	r23, Y+37	; 0x25
    1a26:	8e a1       	ldd	r24, Y+38	; 0x26
    1a28:	9f a1       	ldd	r25, Y+39	; 0x27
    1a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	9b a3       	std	Y+35, r25	; 0x23
    1a34:	8a a3       	std	Y+34, r24	; 0x22
    1a36:	8a a1       	ldd	r24, Y+34	; 0x22
    1a38:	9b a1       	ldd	r25, Y+35	; 0x23
    1a3a:	9f 8f       	std	Y+31, r25	; 0x1f
    1a3c:	8e 8f       	std	Y+30, r24	; 0x1e
    1a3e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a40:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <main+0x1e8>
    1a46:	9f 8f       	std	Y+31, r25	; 0x1f
    1a48:	8e 8f       	std	Y+30, r24	; 0x1e
    1a4a:	0f c0       	rjmp	.+30     	; 0x1a6a <main+0x210>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a4c:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a4e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a52:	98 a9       	ldd	r25, Y+48	; 0x30
    1a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	8c a7       	std	Y+44, r24	; 0x2c
    1a5e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a60:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a64:	8a 95       	dec	r24
    1a66:	f1 f7       	brne	.-4      	; 0x1a64 <main+0x20a>
    1a68:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_us(50);
		DIO_write('D',7,0);
    1a6a:	84 e4       	ldi	r24, 0x44	; 68
    1a6c:	67 e0       	ldi	r22, 0x07	; 7
    1a6e:	40 e0       	ldi	r20, 0x00	; 0
    1a70:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <DIO_write>

		TCCR1B = 0xc1;  	/* Rising edge, no prescaler , noise canceler*/
    1a74:	ee e4       	ldi	r30, 0x4E	; 78
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	81 ec       	ldi	r24, 0xC1	; 193
    1a7a:	80 83       	st	Z, r24
		while ((TIFR&(1<<ICF1)) == 0);
    1a7c:	e8 e5       	ldi	r30, 0x58	; 88
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	88 2f       	mov	r24, r24
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	80 72       	andi	r24, 0x20	; 32
    1a88:	90 70       	andi	r25, 0x00	; 0
    1a8a:	00 97       	sbiw	r24, 0x00	; 0
    1a8c:	b9 f3       	breq	.-18     	; 0x1a7c <main+0x222>
		a = ICR1;  		/* Take value of capture register */
    1a8e:	e6 e4       	ldi	r30, 0x46	; 70
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	91 81       	ldd	r25, Z+1	; 0x01
    1a96:	90 93 87 01 	sts	0x0187, r25
    1a9a:	80 93 86 01 	sts	0x0186, r24
		TIFR = (1<<ICF1);  	/* Clear ICF flag */
    1a9e:	e8 e5       	ldi	r30, 0x58	; 88
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 e2       	ldi	r24, 0x20	; 32
    1aa4:	80 83       	st	Z, r24
		TCCR1B = 0x81;  	/* Falling edge, no prescaler ,noise canceler*/
    1aa6:	ee e4       	ldi	r30, 0x4E	; 78
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	81 e8       	ldi	r24, 0x81	; 129
    1aac:	80 83       	st	Z, r24
		while ((TIFR&(1<<ICF1)) == 0);
    1aae:	e8 e5       	ldi	r30, 0x58	; 88
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	88 2f       	mov	r24, r24
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	80 72       	andi	r24, 0x20	; 32
    1aba:	90 70       	andi	r25, 0x00	; 0
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	b9 f3       	breq	.-18     	; 0x1aae <main+0x254>
		b = ICR1;  		/* Take value of capture register */
    1ac0:	e6 e4       	ldi	r30, 0x46	; 70
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	91 81       	ldd	r25, Z+1	; 0x01
    1ac8:	90 93 81 01 	sts	0x0181, r25
    1acc:	80 93 80 01 	sts	0x0180, r24
		TIFR = (1<<ICF1);  	/* Clear ICF flag */
    1ad0:	e8 e5       	ldi	r30, 0x58	; 88
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 e2       	ldi	r24, 0x20	; 32
    1ad6:	80 83       	st	Z, r24
		TCNT1=0;
    1ad8:	ec e4       	ldi	r30, 0x4C	; 76
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	11 82       	std	Z+1, r1	; 0x01
    1ade:	10 82       	st	Z, r1
		TCCR1B = 0;  		/* Stop the timer */
    1ae0:	ee e4       	ldi	r30, 0x4E	; 78
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	10 82       	st	Z, r1
		high=b-a;
    1ae6:	20 91 80 01 	lds	r18, 0x0180
    1aea:	30 91 81 01 	lds	r19, 0x0181
    1aee:	80 91 86 01 	lds	r24, 0x0186
    1af2:	90 91 87 01 	lds	r25, 0x0187
    1af6:	a9 01       	movw	r20, r18
    1af8:	48 1b       	sub	r20, r24
    1afa:	59 0b       	sbc	r21, r25
    1afc:	ca 01       	movw	r24, r20
    1afe:	90 93 85 01 	sts	0x0185, r25
    1b02:	80 93 84 01 	sts	0x0184, r24
		distance=((high*34600)/(F_CPU*2)) ;
    1b06:	80 91 84 01 	lds	r24, 0x0184
    1b0a:	90 91 85 01 	lds	r25, 0x0185
    1b0e:	cc 01       	movw	r24, r24
    1b10:	a0 e0       	ldi	r26, 0x00	; 0
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	28 e2       	ldi	r18, 0x28	; 40
    1b16:	37 e8       	ldi	r19, 0x87	; 135
    1b18:	40 e0       	ldi	r20, 0x00	; 0
    1b1a:	50 e0       	ldi	r21, 0x00	; 0
    1b1c:	bc 01       	movw	r22, r24
    1b1e:	cd 01       	movw	r24, r26
    1b20:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__mulsi3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	20 e8       	ldi	r18, 0x80	; 128
    1b2a:	34 e8       	ldi	r19, 0x84	; 132
    1b2c:	4e e1       	ldi	r20, 0x1E	; 30
    1b2e:	50 e0       	ldi	r21, 0x00	; 0
    1b30:	bc 01       	movw	r22, r24
    1b32:	cd 01       	movw	r24, r26
    1b34:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <__udivmodsi4>
    1b38:	da 01       	movw	r26, r20
    1b3a:	c9 01       	movw	r24, r18
    1b3c:	90 93 83 01 	sts	0x0183, r25
    1b40:	80 93 82 01 	sts	0x0182, r24
		//}
		//else
		//{
		//DIO_write('C',2,0);
		//}
		if (distance>=80)
    1b44:	80 91 82 01 	lds	r24, 0x0182
    1b48:	90 91 83 01 	lds	r25, 0x0183
    1b4c:	80 35       	cpi	r24, 0x50	; 80
    1b4e:	91 05       	cpc	r25, r1
    1b50:	08 f4       	brcc	.+2      	; 0x1b54 <main+0x2fa>
    1b52:	79 c0       	rjmp	.+242    	; 0x1c46 <main+0x3ec>
		{
			LCD_clearscreen();
    1b54:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <LCD_clearscreen>
			LCD_vSend_string("no object");
    1b58:	80 e6       	ldi	r24, 0x60	; 96
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <LCD_vSend_string>
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	aa ef       	ldi	r26, 0xFA	; 250
    1b66:	b3 e4       	ldi	r27, 0x43	; 67
    1b68:	89 8f       	std	Y+25, r24	; 0x19
    1b6a:	9a 8f       	std	Y+26, r25	; 0x1a
    1b6c:	ab 8f       	std	Y+27, r26	; 0x1b
    1b6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b70:	69 8d       	ldd	r22, Y+25	; 0x19
    1b72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	4a e7       	ldi	r20, 0x7A	; 122
    1b7e:	53 e4       	ldi	r21, 0x43	; 67
    1b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	8d 8b       	std	Y+21, r24	; 0x15
    1b8a:	9e 8b       	std	Y+22, r25	; 0x16
    1b8c:	af 8b       	std	Y+23, r26	; 0x17
    1b8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b90:	6d 89       	ldd	r22, Y+21	; 0x15
    1b92:	7e 89       	ldd	r23, Y+22	; 0x16
    1b94:	8f 89       	ldd	r24, Y+23	; 0x17
    1b96:	98 8d       	ldd	r25, Y+24	; 0x18
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e8       	ldi	r20, 0x80	; 128
    1b9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ba0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ba4:	88 23       	and	r24, r24
    1ba6:	2c f4       	brge	.+10     	; 0x1bb2 <main+0x358>
		__ticks = 1;
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	9c 8b       	std	Y+20, r25	; 0x14
    1bae:	8b 8b       	std	Y+19, r24	; 0x13
    1bb0:	3f c0       	rjmp	.+126    	; 0x1c30 <main+0x3d6>
	else if (__tmp > 65535)
    1bb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	3f ef       	ldi	r19, 0xFF	; 255
    1bbe:	4f e7       	ldi	r20, 0x7F	; 127
    1bc0:	57 e4       	ldi	r21, 0x47	; 71
    1bc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bc6:	18 16       	cp	r1, r24
    1bc8:	4c f5       	brge	.+82     	; 0x1c1c <main+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bca:	69 8d       	ldd	r22, Y+25	; 0x19
    1bcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e2       	ldi	r20, 0x20	; 32
    1bd8:	51 e4       	ldi	r21, 0x41	; 65
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	bc 01       	movw	r22, r24
    1be4:	cd 01       	movw	r24, r26
    1be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	9c 8b       	std	Y+20, r25	; 0x14
    1bf0:	8b 8b       	std	Y+19, r24	; 0x13
    1bf2:	0f c0       	rjmp	.+30     	; 0x1c12 <main+0x3b8>
    1bf4:	89 e1       	ldi	r24, 0x19	; 25
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	9a 8b       	std	Y+18, r25	; 0x12
    1bfa:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bfc:	89 89       	ldd	r24, Y+17	; 0x11
    1bfe:	9a 89       	ldd	r25, Y+18	; 0x12
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <main+0x3a6>
    1c04:	9a 8b       	std	Y+18, r25	; 0x12
    1c06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c08:	8b 89       	ldd	r24, Y+19	; 0x13
    1c0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	9c 8b       	std	Y+20, r25	; 0x14
    1c10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c12:	8b 89       	ldd	r24, Y+19	; 0x13
    1c14:	9c 89       	ldd	r25, Y+20	; 0x14
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	69 f7       	brne	.-38     	; 0x1bf4 <main+0x39a>
    1c1a:	aa c0       	rjmp	.+340    	; 0x1d70 <main+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c20:	8f 89       	ldd	r24, Y+23	; 0x17
    1c22:	98 8d       	ldd	r25, Y+24	; 0x18
    1c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	9c 8b       	std	Y+20, r25	; 0x14
    1c2e:	8b 8b       	std	Y+19, r24	; 0x13
    1c30:	8b 89       	ldd	r24, Y+19	; 0x13
    1c32:	9c 89       	ldd	r25, Y+20	; 0x14
    1c34:	98 8b       	std	Y+16, r25	; 0x10
    1c36:	8f 87       	std	Y+15, r24	; 0x0f
    1c38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c3a:	98 89       	ldd	r25, Y+16	; 0x10
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <main+0x3e2>
    1c40:	98 8b       	std	Y+16, r25	; 0x10
    1c42:	8f 87       	std	Y+15, r24	; 0x0f
    1c44:	95 c0       	rjmp	.+298    	; 0x1d70 <main+0x516>
			_delay_ms(500);
		}
		else
		{
			LCD_clearscreen();
    1c46:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <LCD_clearscreen>
			LCD_vSend_string("distance=");
    1c4a:	8a e6       	ldi	r24, 0x6A	; 106
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <LCD_vSend_string>
			LCD_vSend_char((distance/10)+48);
    1c52:	80 91 82 01 	lds	r24, 0x0182
    1c56:	90 91 83 01 	lds	r25, 0x0183
    1c5a:	2a e0       	ldi	r18, 0x0A	; 10
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	b9 01       	movw	r22, r18
    1c60:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <__udivmodhi4>
    1c64:	cb 01       	movw	r24, r22
    1c66:	80 5d       	subi	r24, 0xD0	; 208
    1c68:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <LCD_vSend_char>
			LCD_vSend_char((distance%10)+48);
    1c6c:	80 91 82 01 	lds	r24, 0x0182
    1c70:	90 91 83 01 	lds	r25, 0x0183
    1c74:	2a e0       	ldi	r18, 0x0A	; 10
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	b9 01       	movw	r22, r18
    1c7a:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <__udivmodhi4>
    1c7e:	80 5d       	subi	r24, 0xD0	; 208
    1c80:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <LCD_vSend_char>
			LCD_vSend_string("cm");
    1c84:	84 e7       	ldi	r24, 0x74	; 116
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <LCD_vSend_string>
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	aa ef       	ldi	r26, 0xFA	; 250
    1c92:	b3 e4       	ldi	r27, 0x43	; 67
    1c94:	8b 87       	std	Y+11, r24	; 0x0b
    1c96:	9c 87       	std	Y+12, r25	; 0x0c
    1c98:	ad 87       	std	Y+13, r26	; 0x0d
    1c9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	4a e7       	ldi	r20, 0x7A	; 122
    1caa:	53 e4       	ldi	r21, 0x43	; 67
    1cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	8f 83       	std	Y+7, r24	; 0x07
    1cb6:	98 87       	std	Y+8, r25	; 0x08
    1cb8:	a9 87       	std	Y+9, r26	; 0x09
    1cba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cbe:	78 85       	ldd	r23, Y+8	; 0x08
    1cc0:	89 85       	ldd	r24, Y+9	; 0x09
    1cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e8       	ldi	r20, 0x80	; 128
    1cca:	5f e3       	ldi	r21, 0x3F	; 63
    1ccc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cd0:	88 23       	and	r24, r24
    1cd2:	2c f4       	brge	.+10     	; 0x1cde <main+0x484>
		__ticks = 1;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	9e 83       	std	Y+6, r25	; 0x06
    1cda:	8d 83       	std	Y+5, r24	; 0x05
    1cdc:	3f c0       	rjmp	.+126    	; 0x1d5c <main+0x502>
	else if (__tmp > 65535)
    1cde:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce0:	78 85       	ldd	r23, Y+8	; 0x08
    1ce2:	89 85       	ldd	r24, Y+9	; 0x09
    1ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	3f ef       	ldi	r19, 0xFF	; 255
    1cea:	4f e7       	ldi	r20, 0x7F	; 127
    1cec:	57 e4       	ldi	r21, 0x47	; 71
    1cee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cf2:	18 16       	cp	r1, r24
    1cf4:	4c f5       	brge	.+82     	; 0x1d48 <main+0x4ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e2       	ldi	r20, 0x20	; 32
    1d04:	51 e4       	ldi	r21, 0x41	; 65
    1d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	bc 01       	movw	r22, r24
    1d10:	cd 01       	movw	r24, r26
    1d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	9e 83       	std	Y+6, r25	; 0x06
    1d1c:	8d 83       	std	Y+5, r24	; 0x05
    1d1e:	0f c0       	rjmp	.+30     	; 0x1d3e <main+0x4e4>
    1d20:	89 e1       	ldi	r24, 0x19	; 25
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	9c 83       	std	Y+4, r25	; 0x04
    1d26:	8b 83       	std	Y+3, r24	; 0x03
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <main+0x4d2>
    1d30:	9c 83       	std	Y+4, r25	; 0x04
    1d32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d34:	8d 81       	ldd	r24, Y+5	; 0x05
    1d36:	9e 81       	ldd	r25, Y+6	; 0x06
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	69 f7       	brne	.-38     	; 0x1d20 <main+0x4c6>
    1d46:	14 c0       	rjmp	.+40     	; 0x1d70 <main+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d48:	6f 81       	ldd	r22, Y+7	; 0x07
    1d4a:	78 85       	ldd	r23, Y+8	; 0x08
    1d4c:	89 85       	ldd	r24, Y+9	; 0x09
    1d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	9e 83       	std	Y+6, r25	; 0x06
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
    1d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d60:	9a 83       	std	Y+2, r25	; 0x02
    1d62:	89 83       	std	Y+1, r24	; 0x01
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	9a 81       	ldd	r25, Y+2	; 0x02
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	f1 f7       	brne	.-4      	; 0x1d68 <main+0x50e>
    1d6c:	9a 83       	std	Y+2, r25	; 0x02
    1d6e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
		}
		//------------------------------------------
				//LDR

				A=ADC_READ(7);
    1d70:	87 e0       	ldi	r24, 0x07	; 7
    1d72:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <ADC_READ>
    1d76:	8d ab       	std	Y+53, r24	; 0x35
				i=A/204.8;
    1d78:	8d a9       	ldd	r24, Y+53	; 0x35
    1d7a:	88 2f       	mov	r24, r24
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	aa 27       	eor	r26, r26
    1d80:	97 fd       	sbrc	r25, 7
    1d82:	a0 95       	com	r26
    1d84:	ba 2f       	mov	r27, r26
    1d86:	bc 01       	movw	r22, r24
    1d88:	cd 01       	movw	r24, r26
    1d8a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	bc 01       	movw	r22, r24
    1d94:	cd 01       	movw	r24, r26
    1d96:	2d ec       	ldi	r18, 0xCD	; 205
    1d98:	3c ec       	ldi	r19, 0xCC	; 204
    1d9a:	4c e4       	ldi	r20, 0x4C	; 76
    1d9c:	53 e4       	ldi	r21, 0x43	; 67
    1d9e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	8a af       	std	Y+58, r24	; 0x3a
    1da8:	9b af       	std	Y+59, r25	; 0x3b
    1daa:	ac af       	std	Y+60, r26	; 0x3c
    1dac:	bd af       	std	Y+61, r27	; 0x3d
				LDR = (i*10/(5-i));
    1dae:	6a ad       	ldd	r22, Y+58	; 0x3a
    1db0:	7b ad       	ldd	r23, Y+59	; 0x3b
    1db2:	8c ad       	ldd	r24, Y+60	; 0x3c
    1db4:	9d ad       	ldd	r25, Y+61	; 0x3d
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	40 e2       	ldi	r20, 0x20	; 32
    1dbc:	51 e4       	ldi	r21, 0x41	; 65
    1dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	7c 01       	movw	r14, r24
    1dc8:	8d 01       	movw	r16, r26
    1dca:	60 e0       	ldi	r22, 0x00	; 0
    1dcc:	70 e0       	ldi	r23, 0x00	; 0
    1dce:	80 ea       	ldi	r24, 0xA0	; 160
    1dd0:	90 e4       	ldi	r25, 0x40	; 64
    1dd2:	2a ad       	ldd	r18, Y+58	; 0x3a
    1dd4:	3b ad       	ldd	r19, Y+59	; 0x3b
    1dd6:	4c ad       	ldd	r20, Y+60	; 0x3c
    1dd8:	5d ad       	ldd	r21, Y+61	; 0x3d
    1dda:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9c 01       	movw	r18, r24
    1de4:	ad 01       	movw	r20, r26
    1de6:	c8 01       	movw	r24, r16
    1de8:	b7 01       	movw	r22, r14
    1dea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	8e ab       	std	Y+54, r24	; 0x36
    1df4:	9f ab       	std	Y+55, r25	; 0x37
    1df6:	a8 af       	std	Y+56, r26	; 0x38
    1df8:	b9 af       	std	Y+57, r27	; 0x39
				if(LDR>=3)
    1dfa:	6e a9       	ldd	r22, Y+54	; 0x36
    1dfc:	7f a9       	ldd	r23, Y+55	; 0x37
    1dfe:	88 ad       	ldd	r24, Y+56	; 0x38
    1e00:	99 ad       	ldd	r25, Y+57	; 0x39
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	40 e4       	ldi	r20, 0x40	; 64
    1e08:	50 e4       	ldi	r21, 0x40	; 64
    1e0a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    1e0e:	88 23       	and	r24, r24
    1e10:	24 f0       	brlt	.+8      	; 0x1e1a <main+0x5c0>
				PORTB=0x1C;  //high resistance-low intensity 3 LED ON
    1e12:	e8 e3       	ldi	r30, 0x38	; 56
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	8c e1       	ldi	r24, 0x1C	; 28
    1e18:	80 83       	st	Z, r24
				if(LDR>=2 && LDR<3)
    1e1a:	6e a9       	ldd	r22, Y+54	; 0x36
    1e1c:	7f a9       	ldd	r23, Y+55	; 0x37
    1e1e:	88 ad       	ldd	r24, Y+56	; 0x38
    1e20:	99 ad       	ldd	r25, Y+57	; 0x39
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	50 e4       	ldi	r21, 0x40	; 64
    1e2a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    1e2e:	88 23       	and	r24, r24
    1e30:	84 f0       	brlt	.+32     	; 0x1e52 <main+0x5f8>
    1e32:	6e a9       	ldd	r22, Y+54	; 0x36
    1e34:	7f a9       	ldd	r23, Y+55	; 0x37
    1e36:	88 ad       	ldd	r24, Y+56	; 0x38
    1e38:	99 ad       	ldd	r25, Y+57	; 0x39
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e4       	ldi	r20, 0x40	; 64
    1e40:	50 e4       	ldi	r21, 0x40	; 64
    1e42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e46:	88 23       	and	r24, r24
    1e48:	24 f4       	brge	.+8      	; 0x1e52 <main+0x5f8>
				PORTB=0x0C;  //medium resistance-intensity 2 LEDS ON
    1e4a:	e8 e3       	ldi	r30, 0x38	; 56
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	8c e0       	ldi	r24, 0x0C	; 12
    1e50:	80 83       	st	Z, r24
				 if(LDR<2 && LDR>=0)
    1e52:	6e a9       	ldd	r22, Y+54	; 0x36
    1e54:	7f a9       	ldd	r23, Y+55	; 0x37
    1e56:	88 ad       	ldd	r24, Y+56	; 0x38
    1e58:	99 ad       	ldd	r25, Y+57	; 0x39
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	40 e0       	ldi	r20, 0x00	; 0
    1e60:	50 e4       	ldi	r21, 0x40	; 64
    1e62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e66:	88 23       	and	r24, r24
    1e68:	84 f4       	brge	.+32     	; 0x1e8a <main+0x630>
    1e6a:	6e a9       	ldd	r22, Y+54	; 0x36
    1e6c:	7f a9       	ldd	r23, Y+55	; 0x37
    1e6e:	88 ad       	ldd	r24, Y+56	; 0x38
    1e70:	99 ad       	ldd	r25, Y+57	; 0x39
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	50 e0       	ldi	r21, 0x00	; 0
    1e7a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    1e7e:	88 23       	and	r24, r24
    1e80:	24 f0       	brlt	.+8      	; 0x1e8a <main+0x630>
				PORTB=0x04; //low resistance-high intensity 1 LEDS ON
    1e82:	e8 e3       	ldi	r30, 0x38	; 56
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	84 e0       	ldi	r24, 0x04	; 4
    1e88:	80 83       	st	Z, r24
		//LM35
		d=ADC_READ(0);
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <ADC_READ>
    1e90:	fe 01       	movw	r30, r28
    1e92:	ea 5b       	subi	r30, 0xBA	; 186
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	80 83       	st	Z, r24
		v=(d*5.0)/255;
    1e98:	fe 01       	movw	r30, r28
    1e9a:	ea 5b       	subi	r30, 0xBA	; 186
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	80 81       	ld	r24, Z
    1ea0:	88 2f       	mov	r24, r24
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	aa 27       	eor	r26, r26
    1ea6:	97 fd       	sbrc	r25, 7
    1ea8:	a0 95       	com	r26
    1eaa:	ba 2f       	mov	r27, r26
    1eac:	bc 01       	movw	r22, r24
    1eae:	cd 01       	movw	r24, r26
    1eb0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	bc 01       	movw	r22, r24
    1eba:	cd 01       	movw	r24, r26
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 ea       	ldi	r20, 0xA0	; 160
    1ec2:	50 e4       	ldi	r21, 0x40	; 64
    1ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	8e 01       	movw	r16, r28
    1ece:	0e 5b       	subi	r16, 0xBE	; 190
    1ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed2:	bc 01       	movw	r22, r24
    1ed4:	cd 01       	movw	r24, r26
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	4f e7       	ldi	r20, 0x7F	; 127
    1edc:	53 e4       	ldi	r21, 0x43	; 67
    1ede:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	f8 01       	movw	r30, r16
    1ee8:	80 83       	st	Z, r24
    1eea:	91 83       	std	Z+1, r25	; 0x01
    1eec:	a2 83       	std	Z+2, r26	; 0x02
    1eee:	b3 83       	std	Z+3, r27	; 0x03
		t=(v/0.01);
    1ef0:	8e 01       	movw	r16, r28
    1ef2:	02 5c       	subi	r16, 0xC2	; 194
    1ef4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	ee 5b       	subi	r30, 0xBE	; 190
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	60 81       	ld	r22, Z
    1efe:	71 81       	ldd	r23, Z+1	; 0x01
    1f00:	82 81       	ldd	r24, Z+2	; 0x02
    1f02:	93 81       	ldd	r25, Z+3	; 0x03
    1f04:	2a e0       	ldi	r18, 0x0A	; 10
    1f06:	37 ed       	ldi	r19, 0xD7	; 215
    1f08:	43 e2       	ldi	r20, 0x23	; 35
    1f0a:	5c e3       	ldi	r21, 0x3C	; 60
    1f0c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	f8 01       	movw	r30, r16
    1f16:	80 83       	st	Z, r24
    1f18:	91 83       	std	Z+1, r25	; 0x01
    1f1a:	a2 83       	std	Z+2, r26	; 0x02
    1f1c:	b3 83       	std	Z+3, r27	; 0x03
		////t=(d*150*5)/(1023*1.5);
		if(t>=45)
    1f1e:	fe 01       	movw	r30, r28
    1f20:	fe 96       	adiw	r30, 0x3e	; 62
    1f22:	60 81       	ld	r22, Z
    1f24:	71 81       	ldd	r23, Z+1	; 0x01
    1f26:	82 81       	ldd	r24, Z+2	; 0x02
    1f28:	93 81       	ldd	r25, Z+3	; 0x03
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	44 e3       	ldi	r20, 0x34	; 52
    1f30:	52 e4       	ldi	r21, 0x42	; 66
    1f32:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    1f36:	88 23       	and	r24, r24
    1f38:	34 f0       	brlt	.+12     	; 0x1f46 <main+0x6ec>
		{
			DIO_write('C',7,1);//PORTC|=(1<<0)
    1f3a:	83 e4       	ldi	r24, 0x43	; 67
    1f3c:	67 e0       	ldi	r22, 0x07	; 7
    1f3e:	41 e0       	ldi	r20, 0x01	; 1
    1f40:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <DIO_write>
    1f44:	c8 cc       	rjmp	.-1648   	; 0x18d6 <main+0x7c>
		}
		else
		{
			//DIO_write('C',1,1);//PORTC|=(1<<1);

			DIO_write('C',7,0);//PORTC&=0xf2;
    1f46:	83 e4       	ldi	r24, 0x43	; 67
    1f48:	67 e0       	ldi	r22, 0x07	; 7
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <DIO_write>
    1f50:	c2 cc       	rjmp	.-1660   	; 0x18d6 <main+0x7c>

00001f52 <ADC_INIT>:


	}
}
void ADC_INIT()
{
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
	ADMUX|=(1<<REFS0);
    1f5a:	a7 e2       	ldi	r26, 0x27	; 39
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	e7 e2       	ldi	r30, 0x27	; 39
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	80 64       	ori	r24, 0x40	; 64
    1f66:	8c 93       	st	X, r24
	ADMUX|=(1<<ADLAR);
    1f68:	a7 e2       	ldi	r26, 0x27	; 39
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	e7 e2       	ldi	r30, 0x27	; 39
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	80 62       	ori	r24, 0x20	; 32
    1f74:	8c 93       	st	X, r24
	ADCSRA|=(1<<ADPS0);
    1f76:	a6 e2       	ldi	r26, 0x26	; 38
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	e6 e2       	ldi	r30, 0x26	; 38
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	81 60       	ori	r24, 0x01	; 1
    1f82:	8c 93       	st	X, r24
	ADCSRA|=(1<<ADPS1);
    1f84:	a6 e2       	ldi	r26, 0x26	; 38
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e6 e2       	ldi	r30, 0x26	; 38
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	82 60       	ori	r24, 0x02	; 2
    1f90:	8c 93       	st	X, r24
	ADCSRA|=(1<<ADPS2);
    1f92:	a6 e2       	ldi	r26, 0x26	; 38
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e6 e2       	ldi	r30, 0x26	; 38
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	84 60       	ori	r24, 0x04	; 4
    1f9e:	8c 93       	st	X, r24
	ADCSRA|=(1<<ADEN);
    1fa0:	a6 e2       	ldi	r26, 0x26	; 38
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e6 e2       	ldi	r30, 0x26	; 38
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	80 68       	ori	r24, 0x80	; 128
    1fac:	8c 93       	st	X, r24
}
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <ADC_READ>:

uint8_t ADC_READ(uint8_t _ch)
{
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	0f 92       	push	r0
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0xE0;
    1fc0:	a7 e2       	ldi	r26, 0x27	; 39
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e7 e2       	ldi	r30, 0x27	; 39
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	80 7e       	andi	r24, 0xE0	; 224
    1fcc:	8c 93       	st	X, r24
	ADMUX|=_ch;
    1fce:	a7 e2       	ldi	r26, 0x27	; 39
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e7 e2       	ldi	r30, 0x27	; 39
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	90 81       	ld	r25, Z
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	89 2b       	or	r24, r25
    1fdc:	8c 93       	st	X, r24
	ADCSRA|=(1<<ADSC);
    1fde:	a6 e2       	ldi	r26, 0x26	; 38
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	e6 e2       	ldi	r30, 0x26	; 38
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	80 64       	ori	r24, 0x40	; 64
    1fea:	8c 93       	st	X, r24
	while(ADCSRA&(1<<ADSC));
    1fec:	e6 e2       	ldi	r30, 0x26	; 38
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	88 2f       	mov	r24, r24
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	80 74       	andi	r24, 0x40	; 64
    1ff8:	90 70       	andi	r25, 0x00	; 0
    1ffa:	00 97       	sbiw	r24, 0x00	; 0
    1ffc:	b9 f7       	brne	.-18     	; 0x1fec <ADC_READ+0x38>
	return ADCH;
    1ffe:	e5 e2       	ldi	r30, 0x25	; 37
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
}
    2004:	0f 90       	pop	r0
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <__vector_1>:


ISR (INT0_vect)
{
    200c:	1f 92       	push	r1
    200e:	0f 92       	push	r0
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	0f 92       	push	r0
    2014:	11 24       	eor	r1, r1
    2016:	2f 93       	push	r18
    2018:	3f 93       	push	r19
    201a:	4f 93       	push	r20
    201c:	5f 93       	push	r21
    201e:	6f 93       	push	r22
    2020:	7f 93       	push	r23
    2022:	8f 93       	push	r24
    2024:	9f 93       	push	r25
    2026:	af 93       	push	r26
    2028:	bf 93       	push	r27
    202a:	ef 93       	push	r30
    202c:	ff 93       	push	r31
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
	if(distance <= 20)
    2036:	80 91 82 01 	lds	r24, 0x0182
    203a:	90 91 83 01 	lds	r25, 0x0183
    203e:	85 31       	cpi	r24, 0x15	; 21
    2040:	91 05       	cpc	r25, r1
    2042:	30 f4       	brcc	.+12     	; 0x2050 <__vector_1+0x44>
	DIO_write('C',2,1);		//Toggle value of PC0 (Red-LED)
    2044:	83 e4       	ldi	r24, 0x43	; 67
    2046:	62 e0       	ldi	r22, 0x02	; 2
    2048:	41 e0       	ldi	r20, 0x01	; 1
    204a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <DIO_write>
    204e:	05 c0       	rjmp	.+10     	; 0x205a <__vector_1+0x4e>
	else
	DIO_write('C',2,0);
    2050:	83 e4       	ldi	r24, 0x43	; 67
    2052:	62 e0       	ldi	r22, 0x02	; 2
    2054:	40 e0       	ldi	r20, 0x00	; 0
    2056:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <DIO_write>

}
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	ff 91       	pop	r31
    2060:	ef 91       	pop	r30
    2062:	bf 91       	pop	r27
    2064:	af 91       	pop	r26
    2066:	9f 91       	pop	r25
    2068:	8f 91       	pop	r24
    206a:	7f 91       	pop	r23
    206c:	6f 91       	pop	r22
    206e:	5f 91       	pop	r21
    2070:	4f 91       	pop	r20
    2072:	3f 91       	pop	r19
    2074:	2f 91       	pop	r18
    2076:	0f 90       	pop	r0
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	0f 90       	pop	r0
    207c:	1f 90       	pop	r1
    207e:	18 95       	reti

00002080 <INT0_Init>:

/*External INT1 enable and configuration function*/
void INT0_Init(void)
{
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62

	SREG |= (1<<7);		    //Set the corresponding (Global) interrupt mask
    2088:	af e5       	ldi	r26, 0x5F	; 95
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	ef e5       	ldi	r30, 0x5F	; 95
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	80 68       	ori	r24, 0x80	; 128
    2094:	8c 93       	st	X, r24
	DDRD &= ~(1<<2);		//Configure INT1/PD3 as input pin
    2096:	a1 e3       	ldi	r26, 0x31	; 49
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e1 e3       	ldi	r30, 0x31	; 49
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	8b 7f       	andi	r24, 0xFB	; 251
    20a2:	8c 93       	st	X, r24
	PORTD |= (1<<2);		//Enable Pull-Up resistor
    20a4:	a2 e3       	ldi	r26, 0x32	; 50
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	e2 e3       	ldi	r30, 0x32	; 50
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	84 60       	ori	r24, 0x04	; 4
    20b0:	8c 93       	st	X, r24
	GICR |= (1<<INT0);		//Enable External Interrupt pin INT0
    20b2:	ab e5       	ldi	r26, 0x5B	; 91
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	eb e5       	ldi	r30, 0x5B	; 91
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	80 64       	ori	r24, 0x40	; 64
    20be:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC01);	//Trigger INT0 with the falling edge
    20c0:	a5 e5       	ldi	r26, 0x55	; 85
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e5 e5       	ldi	r30, 0x55	; 85
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	82 60       	ori	r24, 0x02	; 2
    20cc:	8c 93       	st	X, r24
}
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <__vector_2>:
ISR (INT1_vect)
{
    20d4:	1f 92       	push	r1
    20d6:	0f 92       	push	r0
    20d8:	0f b6       	in	r0, 0x3f	; 63
    20da:	0f 92       	push	r0
    20dc:	11 24       	eor	r1, r1
    20de:	2f 93       	push	r18
    20e0:	3f 93       	push	r19
    20e2:	4f 93       	push	r20
    20e4:	5f 93       	push	r21
    20e6:	6f 93       	push	r22
    20e8:	7f 93       	push	r23
    20ea:	8f 93       	push	r24
    20ec:	9f 93       	push	r25
    20ee:	af 93       	push	r26
    20f0:	bf 93       	push	r27
    20f2:	ef 93       	push	r30
    20f4:	ff 93       	push	r31
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
	if(distance <= 20)
    20fe:	80 91 82 01 	lds	r24, 0x0182
    2102:	90 91 83 01 	lds	r25, 0x0183
    2106:	85 31       	cpi	r24, 0x15	; 21
    2108:	91 05       	cpc	r25, r1
    210a:	30 f4       	brcc	.+12     	; 0x2118 <__vector_2+0x44>
	DIO_write('C',2,1);		//Toggle value of PC0 (Red-LED)
    210c:	83 e4       	ldi	r24, 0x43	; 67
    210e:	62 e0       	ldi	r22, 0x02	; 2
    2110:	41 e0       	ldi	r20, 0x01	; 1
    2112:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <DIO_write>
    2116:	05 c0       	rjmp	.+10     	; 0x2122 <__vector_2+0x4e>
	else
	DIO_write('C',2,0);
    2118:	83 e4       	ldi	r24, 0x43	; 67
    211a:	62 e0       	ldi	r22, 0x02	; 2
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <DIO_write>

}
    2122:	cf 91       	pop	r28
    2124:	df 91       	pop	r29
    2126:	ff 91       	pop	r31
    2128:	ef 91       	pop	r30
    212a:	bf 91       	pop	r27
    212c:	af 91       	pop	r26
    212e:	9f 91       	pop	r25
    2130:	8f 91       	pop	r24
    2132:	7f 91       	pop	r23
    2134:	6f 91       	pop	r22
    2136:	5f 91       	pop	r21
    2138:	4f 91       	pop	r20
    213a:	3f 91       	pop	r19
    213c:	2f 91       	pop	r18
    213e:	0f 90       	pop	r0
    2140:	0f be       	out	0x3f, r0	; 63
    2142:	0f 90       	pop	r0
    2144:	1f 90       	pop	r1
    2146:	18 95       	reti

00002148 <INT1_Init>:

/*External INT1 enable and configuration function*/
void INT1_Init(void)
{
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62

	SREG |= (1<<7);		    //Set the corresponding (Global) interrupt mask
    2150:	af e5       	ldi	r26, 0x5F	; 95
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	ef e5       	ldi	r30, 0x5F	; 95
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	80 68       	ori	r24, 0x80	; 128
    215c:	8c 93       	st	X, r24
	DDRD &= ~(1<<3);		//Configure INT1/PD3 as input pin
    215e:	a1 e3       	ldi	r26, 0x31	; 49
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e1 e3       	ldi	r30, 0x31	; 49
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	87 7f       	andi	r24, 0xF7	; 247
    216a:	8c 93       	st	X, r24
	PORTD |= (1<<3);		//Enable Pull-Up resistor
    216c:	a2 e3       	ldi	r26, 0x32	; 50
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	e2 e3       	ldi	r30, 0x32	; 50
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	88 60       	ori	r24, 0x08	; 8
    2178:	8c 93       	st	X, r24
	GICR |= (1<<INT1);		//Enable External Interrupt pin INT0
    217a:	ab e5       	ldi	r26, 0x5B	; 91
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	eb e5       	ldi	r30, 0x5B	; 91
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	80 68       	ori	r24, 0x80	; 128
    2186:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC11);	//Trigger INT0 with the falling edge
    2188:	a5 e5       	ldi	r26, 0x55	; 85
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	e5 e5       	ldi	r30, 0x55	; 85
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	88 60       	ori	r24, 0x08	; 8
    2194:	8c 93       	st	X, r24
}
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	08 95       	ret

0000219c <LCD_vInit>:
#include "LCD.h"
#define  F_CPU 8000000UL
#include <util/delay.h>

void LCD_vInit(void)
{
    219c:	0f 93       	push	r16
    219e:	1f 93       	push	r17
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	c4 55       	subi	r28, 0x54	; 84
    21aa:	d0 40       	sbci	r29, 0x00	; 0
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	fe 01       	movw	r30, r28
    21b8:	ef 5a       	subi	r30, 0xAF	; 175
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	a8 e4       	ldi	r26, 0x48	; 72
    21c2:	b3 e4       	ldi	r27, 0x43	; 67
    21c4:	80 83       	st	Z, r24
    21c6:	91 83       	std	Z+1, r25	; 0x01
    21c8:	a2 83       	std	Z+2, r26	; 0x02
    21ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21cc:	8e 01       	movw	r16, r28
    21ce:	03 5b       	subi	r16, 0xB3	; 179
    21d0:	1f 4f       	sbci	r17, 0xFF	; 255
    21d2:	fe 01       	movw	r30, r28
    21d4:	ef 5a       	subi	r30, 0xAF	; 175
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	60 81       	ld	r22, Z
    21da:	71 81       	ldd	r23, Z+1	; 0x01
    21dc:	82 81       	ldd	r24, Z+2	; 0x02
    21de:	93 81       	ldd	r25, Z+3	; 0x03
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	4a ef       	ldi	r20, 0xFA	; 250
    21e6:	54 e4       	ldi	r21, 0x44	; 68
    21e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	f8 01       	movw	r30, r16
    21f2:	80 83       	st	Z, r24
    21f4:	91 83       	std	Z+1, r25	; 0x01
    21f6:	a2 83       	std	Z+2, r26	; 0x02
    21f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21fa:	fe 01       	movw	r30, r28
    21fc:	e3 5b       	subi	r30, 0xB3	; 179
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	60 81       	ld	r22, Z
    2202:	71 81       	ldd	r23, Z+1	; 0x01
    2204:	82 81       	ldd	r24, Z+2	; 0x02
    2206:	93 81       	ldd	r25, Z+3	; 0x03
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e8       	ldi	r20, 0x80	; 128
    220e:	5f e3       	ldi	r21, 0x3F	; 63
    2210:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2214:	88 23       	and	r24, r24
    2216:	44 f4       	brge	.+16     	; 0x2228 <LCD_vInit+0x8c>
		__ticks = 1;
    2218:	fe 01       	movw	r30, r28
    221a:	e5 5b       	subi	r30, 0xB5	; 181
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	80 83       	st	Z, r24
    2226:	64 c0       	rjmp	.+200    	; 0x22f0 <LCD_vInit+0x154>
	else if (__tmp > 65535)
    2228:	fe 01       	movw	r30, r28
    222a:	e3 5b       	subi	r30, 0xB3	; 179
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	60 81       	ld	r22, Z
    2230:	71 81       	ldd	r23, Z+1	; 0x01
    2232:	82 81       	ldd	r24, Z+2	; 0x02
    2234:	93 81       	ldd	r25, Z+3	; 0x03
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	3f ef       	ldi	r19, 0xFF	; 255
    223a:	4f e7       	ldi	r20, 0x7F	; 127
    223c:	57 e4       	ldi	r21, 0x47	; 71
    223e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2242:	18 16       	cp	r1, r24
    2244:	0c f0       	brlt	.+2      	; 0x2248 <LCD_vInit+0xac>
    2246:	43 c0       	rjmp	.+134    	; 0x22ce <LCD_vInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2248:	fe 01       	movw	r30, r28
    224a:	ef 5a       	subi	r30, 0xAF	; 175
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	60 81       	ld	r22, Z
    2250:	71 81       	ldd	r23, Z+1	; 0x01
    2252:	82 81       	ldd	r24, Z+2	; 0x02
    2254:	93 81       	ldd	r25, Z+3	; 0x03
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	40 e2       	ldi	r20, 0x20	; 32
    225c:	51 e4       	ldi	r21, 0x41	; 65
    225e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	8e 01       	movw	r16, r28
    2268:	05 5b       	subi	r16, 0xB5	; 181
    226a:	1f 4f       	sbci	r17, 0xFF	; 255
    226c:	bc 01       	movw	r22, r24
    226e:	cd 01       	movw	r24, r26
    2270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	f8 01       	movw	r30, r16
    227a:	91 83       	std	Z+1, r25	; 0x01
    227c:	80 83       	st	Z, r24
    227e:	1f c0       	rjmp	.+62     	; 0x22be <LCD_vInit+0x122>
    2280:	fe 01       	movw	r30, r28
    2282:	e7 5b       	subi	r30, 0xB7	; 183
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	88 ec       	ldi	r24, 0xC8	; 200
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	91 83       	std	Z+1, r25	; 0x01
    228c:	80 83       	st	Z, r24
    228e:	fe 01       	movw	r30, r28
    2290:	e7 5b       	subi	r30, 0xB7	; 183
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	80 81       	ld	r24, Z
    2296:	91 81       	ldd	r25, Z+1	; 0x01
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	f1 f7       	brne	.-4      	; 0x2298 <LCD_vInit+0xfc>
    229c:	fe 01       	movw	r30, r28
    229e:	e7 5b       	subi	r30, 0xB7	; 183
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	91 83       	std	Z+1, r25	; 0x01
    22a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a6:	de 01       	movw	r26, r28
    22a8:	a5 5b       	subi	r26, 0xB5	; 181
    22aa:	bf 4f       	sbci	r27, 0xFF	; 255
    22ac:	fe 01       	movw	r30, r28
    22ae:	e5 5b       	subi	r30, 0xB5	; 181
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	80 81       	ld	r24, Z
    22b4:	91 81       	ldd	r25, Z+1	; 0x01
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	11 96       	adiw	r26, 0x01	; 1
    22ba:	9c 93       	st	X, r25
    22bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22be:	fe 01       	movw	r30, r28
    22c0:	e5 5b       	subi	r30, 0xB5	; 181
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	80 81       	ld	r24, Z
    22c6:	91 81       	ldd	r25, Z+1	; 0x01
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	d1 f6       	brne	.-76     	; 0x2280 <LCD_vInit+0xe4>
    22cc:	27 c0       	rjmp	.+78     	; 0x231c <LCD_vInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ce:	8e 01       	movw	r16, r28
    22d0:	05 5b       	subi	r16, 0xB5	; 181
    22d2:	1f 4f       	sbci	r17, 0xFF	; 255
    22d4:	fe 01       	movw	r30, r28
    22d6:	e3 5b       	subi	r30, 0xB3	; 179
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	60 81       	ld	r22, Z
    22dc:	71 81       	ldd	r23, Z+1	; 0x01
    22de:	82 81       	ldd	r24, Z+2	; 0x02
    22e0:	93 81       	ldd	r25, Z+3	; 0x03
    22e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	f8 01       	movw	r30, r16
    22ec:	91 83       	std	Z+1, r25	; 0x01
    22ee:	80 83       	st	Z, r24
    22f0:	de 01       	movw	r26, r28
    22f2:	a9 5b       	subi	r26, 0xB9	; 185
    22f4:	bf 4f       	sbci	r27, 0xFF	; 255
    22f6:	fe 01       	movw	r30, r28
    22f8:	e5 5b       	subi	r30, 0xB5	; 181
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	80 81       	ld	r24, Z
    22fe:	91 81       	ldd	r25, Z+1	; 0x01
    2300:	8d 93       	st	X+, r24
    2302:	9c 93       	st	X, r25
    2304:	fe 01       	movw	r30, r28
    2306:	e9 5b       	subi	r30, 0xB9	; 185
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	80 81       	ld	r24, Z
    230c:	91 81       	ldd	r25, Z+1	; 0x01
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	f1 f7       	brne	.-4      	; 0x230e <LCD_vInit+0x172>
    2312:	fe 01       	movw	r30, r28
    2314:	e9 5b       	subi	r30, 0xB9	; 185
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	91 83       	std	Z+1, r25	; 0x01
    231a:	80 83       	st	Z, r24
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1); 
	
	#elif defined four_bits_mode
	DIO_vsetPINDir('A',3,1);
    231c:	81 e4       	ldi	r24, 0x41	; 65
    231e:	63 e0       	ldi	r22, 0x03	; 3
    2320:	41 e0       	ldi	r20, 0x01	; 1
    2322:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',4,1);
    2326:	81 e4       	ldi	r24, 0x41	; 65
    2328:	64 e0       	ldi	r22, 0x04	; 4
    232a:	41 e0       	ldi	r20, 0x01	; 1
    232c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
    2330:	81 e4       	ldi	r24, 0x41	; 65
    2332:	65 e0       	ldi	r22, 0x05	; 5
    2334:	41 e0       	ldi	r20, 0x01	; 1
    2336:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
    233a:	81 e4       	ldi	r24, 0x41	; 65
    233c:	66 e0       	ldi	r22, 0x06	; 6
    233e:	41 e0       	ldi	r20, 0x01	; 1
    2340:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',EN,1);
    2344:	81 e4       	ldi	r24, 0x41	; 65
    2346:	62 e0       	ldi	r22, 0x02	; 2
    2348:	41 e0       	ldi	r20, 0x01	; 1
    234a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',RW,1);
    234e:	81 e4       	ldi	r24, 0x41	; 65
    2350:	60 e0       	ldi	r22, 0x00	; 0
    2352:	41 e0       	ldi	r20, 0x01	; 1
    2354:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',RS,1);
    2358:	81 e4       	ldi	r24, 0x41	; 65
    235a:	61 e0       	ldi	r22, 0x01	; 1
    235c:	41 e0       	ldi	r20, 0x01	; 1
    235e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vsetPINDir>
   	DIO_write('A',RW,0);
    2362:	81 e4       	ldi	r24, 0x41	; 65
    2364:	60 e0       	ldi	r22, 0x00	; 0
    2366:	40 e0       	ldi	r20, 0x00	; 0
    2368:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <DIO_write>
	LCD_vSend_cmd(RETURN_HOME); //return home
    236c:	82 e0       	ldi	r24, 0x02	; 2
    236e:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <LCD_vSend_cmd>
    2372:	fe 01       	movw	r30, r28
    2374:	ed 5b       	subi	r30, 0xBD	; 189
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	a0 e2       	ldi	r26, 0x20	; 32
    237e:	b1 e4       	ldi	r27, 0x41	; 65
    2380:	80 83       	st	Z, r24
    2382:	91 83       	std	Z+1, r25	; 0x01
    2384:	a2 83       	std	Z+2, r26	; 0x02
    2386:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2388:	8e 01       	movw	r16, r28
    238a:	01 5c       	subi	r16, 0xC1	; 193
    238c:	1f 4f       	sbci	r17, 0xFF	; 255
    238e:	fe 01       	movw	r30, r28
    2390:	ed 5b       	subi	r30, 0xBD	; 189
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	60 81       	ld	r22, Z
    2396:	71 81       	ldd	r23, Z+1	; 0x01
    2398:	82 81       	ldd	r24, Z+2	; 0x02
    239a:	93 81       	ldd	r25, Z+3	; 0x03
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	4a ef       	ldi	r20, 0xFA	; 250
    23a2:	54 e4       	ldi	r21, 0x44	; 68
    23a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	f8 01       	movw	r30, r16
    23ae:	80 83       	st	Z, r24
    23b0:	91 83       	std	Z+1, r25	; 0x01
    23b2:	a2 83       	std	Z+2, r26	; 0x02
    23b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23b6:	fe 01       	movw	r30, r28
    23b8:	ff 96       	adiw	r30, 0x3f	; 63
    23ba:	60 81       	ld	r22, Z
    23bc:	71 81       	ldd	r23, Z+1	; 0x01
    23be:	82 81       	ldd	r24, Z+2	; 0x02
    23c0:	93 81       	ldd	r25, Z+3	; 0x03
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e8       	ldi	r20, 0x80	; 128
    23c8:	5f e3       	ldi	r21, 0x3F	; 63
    23ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23ce:	88 23       	and	r24, r24
    23d0:	2c f4       	brge	.+10     	; 0x23dc <LCD_vInit+0x240>
		__ticks = 1;
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	9e af       	std	Y+62, r25	; 0x3e
    23d8:	8d af       	std	Y+61, r24	; 0x3d
    23da:	46 c0       	rjmp	.+140    	; 0x2468 <LCD_vInit+0x2cc>
	else if (__tmp > 65535)
    23dc:	fe 01       	movw	r30, r28
    23de:	ff 96       	adiw	r30, 0x3f	; 63
    23e0:	60 81       	ld	r22, Z
    23e2:	71 81       	ldd	r23, Z+1	; 0x01
    23e4:	82 81       	ldd	r24, Z+2	; 0x02
    23e6:	93 81       	ldd	r25, Z+3	; 0x03
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	3f ef       	ldi	r19, 0xFF	; 255
    23ec:	4f e7       	ldi	r20, 0x7F	; 127
    23ee:	57 e4       	ldi	r21, 0x47	; 71
    23f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23f4:	18 16       	cp	r1, r24
    23f6:	64 f5       	brge	.+88     	; 0x2450 <LCD_vInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f8:	fe 01       	movw	r30, r28
    23fa:	ed 5b       	subi	r30, 0xBD	; 189
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	60 81       	ld	r22, Z
    2400:	71 81       	ldd	r23, Z+1	; 0x01
    2402:	82 81       	ldd	r24, Z+2	; 0x02
    2404:	93 81       	ldd	r25, Z+3	; 0x03
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e2       	ldi	r20, 0x20	; 32
    240c:	51 e4       	ldi	r21, 0x41	; 65
    240e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	bc 01       	movw	r22, r24
    2418:	cd 01       	movw	r24, r26
    241a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	9e af       	std	Y+62, r25	; 0x3e
    2424:	8d af       	std	Y+61, r24	; 0x3d
    2426:	0f c0       	rjmp	.+30     	; 0x2446 <LCD_vInit+0x2aa>
    2428:	88 ec       	ldi	r24, 0xC8	; 200
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	9c af       	std	Y+60, r25	; 0x3c
    242e:	8b af       	std	Y+59, r24	; 0x3b
    2430:	8b ad       	ldd	r24, Y+59	; 0x3b
    2432:	9c ad       	ldd	r25, Y+60	; 0x3c
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	f1 f7       	brne	.-4      	; 0x2434 <LCD_vInit+0x298>
    2438:	9c af       	std	Y+60, r25	; 0x3c
    243a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243c:	8d ad       	ldd	r24, Y+61	; 0x3d
    243e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	9e af       	std	Y+62, r25	; 0x3e
    2444:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2446:	8d ad       	ldd	r24, Y+61	; 0x3d
    2448:	9e ad       	ldd	r25, Y+62	; 0x3e
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	69 f7       	brne	.-38     	; 0x2428 <LCD_vInit+0x28c>
    244e:	16 c0       	rjmp	.+44     	; 0x247c <LCD_vInit+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2450:	fe 01       	movw	r30, r28
    2452:	ff 96       	adiw	r30, 0x3f	; 63
    2454:	60 81       	ld	r22, Z
    2456:	71 81       	ldd	r23, Z+1	; 0x01
    2458:	82 81       	ldd	r24, Z+2	; 0x02
    245a:	93 81       	ldd	r25, Z+3	; 0x03
    245c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	9e af       	std	Y+62, r25	; 0x3e
    2466:	8d af       	std	Y+61, r24	; 0x3d
    2468:	8d ad       	ldd	r24, Y+61	; 0x3d
    246a:	9e ad       	ldd	r25, Y+62	; 0x3e
    246c:	9a af       	std	Y+58, r25	; 0x3a
    246e:	89 af       	std	Y+57, r24	; 0x39
    2470:	89 ad       	ldd	r24, Y+57	; 0x39
    2472:	9a ad       	ldd	r25, Y+58	; 0x3a
    2474:	01 97       	sbiw	r24, 0x01	; 1
    2476:	f1 f7       	brne	.-4      	; 0x2474 <LCD_vInit+0x2d8>
    2478:	9a af       	std	Y+58, r25	; 0x3a
    247a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS); //4bit mode
    247c:	88 e2       	ldi	r24, 0x28	; 40
    247e:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <LCD_vSend_cmd>
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	a0 e8       	ldi	r26, 0x80	; 128
    2488:	bf e3       	ldi	r27, 0x3F	; 63
    248a:	8d ab       	std	Y+53, r24	; 0x35
    248c:	9e ab       	std	Y+54, r25	; 0x36
    248e:	af ab       	std	Y+55, r26	; 0x37
    2490:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2492:	6d a9       	ldd	r22, Y+53	; 0x35
    2494:	7e a9       	ldd	r23, Y+54	; 0x36
    2496:	8f a9       	ldd	r24, Y+55	; 0x37
    2498:	98 ad       	ldd	r25, Y+56	; 0x38
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	4a ef       	ldi	r20, 0xFA	; 250
    24a0:	54 e4       	ldi	r21, 0x44	; 68
    24a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	89 ab       	std	Y+49, r24	; 0x31
    24ac:	9a ab       	std	Y+50, r25	; 0x32
    24ae:	ab ab       	std	Y+51, r26	; 0x33
    24b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24b2:	69 a9       	ldd	r22, Y+49	; 0x31
    24b4:	7a a9       	ldd	r23, Y+50	; 0x32
    24b6:	8b a9       	ldd	r24, Y+51	; 0x33
    24b8:	9c a9       	ldd	r25, Y+52	; 0x34
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e8       	ldi	r20, 0x80	; 128
    24c0:	5f e3       	ldi	r21, 0x3F	; 63
    24c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24c6:	88 23       	and	r24, r24
    24c8:	2c f4       	brge	.+10     	; 0x24d4 <LCD_vInit+0x338>
		__ticks = 1;
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	98 ab       	std	Y+48, r25	; 0x30
    24d0:	8f a7       	std	Y+47, r24	; 0x2f
    24d2:	3f c0       	rjmp	.+126    	; 0x2552 <LCD_vInit+0x3b6>
	else if (__tmp > 65535)
    24d4:	69 a9       	ldd	r22, Y+49	; 0x31
    24d6:	7a a9       	ldd	r23, Y+50	; 0x32
    24d8:	8b a9       	ldd	r24, Y+51	; 0x33
    24da:	9c a9       	ldd	r25, Y+52	; 0x34
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	3f ef       	ldi	r19, 0xFF	; 255
    24e0:	4f e7       	ldi	r20, 0x7F	; 127
    24e2:	57 e4       	ldi	r21, 0x47	; 71
    24e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24e8:	18 16       	cp	r1, r24
    24ea:	4c f5       	brge	.+82     	; 0x253e <LCD_vInit+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ec:	6d a9       	ldd	r22, Y+53	; 0x35
    24ee:	7e a9       	ldd	r23, Y+54	; 0x36
    24f0:	8f a9       	ldd	r24, Y+55	; 0x37
    24f2:	98 ad       	ldd	r25, Y+56	; 0x38
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	40 e2       	ldi	r20, 0x20	; 32
    24fa:	51 e4       	ldi	r21, 0x41	; 65
    24fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	bc 01       	movw	r22, r24
    2506:	cd 01       	movw	r24, r26
    2508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	98 ab       	std	Y+48, r25	; 0x30
    2512:	8f a7       	std	Y+47, r24	; 0x2f
    2514:	0f c0       	rjmp	.+30     	; 0x2534 <LCD_vInit+0x398>
    2516:	88 ec       	ldi	r24, 0xC8	; 200
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	9e a7       	std	Y+46, r25	; 0x2e
    251c:	8d a7       	std	Y+45, r24	; 0x2d
    251e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2520:	9e a5       	ldd	r25, Y+46	; 0x2e
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	f1 f7       	brne	.-4      	; 0x2522 <LCD_vInit+0x386>
    2526:	9e a7       	std	Y+46, r25	; 0x2e
    2528:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252a:	8f a5       	ldd	r24, Y+47	; 0x2f
    252c:	98 a9       	ldd	r25, Y+48	; 0x30
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	98 ab       	std	Y+48, r25	; 0x30
    2532:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2534:	8f a5       	ldd	r24, Y+47	; 0x2f
    2536:	98 a9       	ldd	r25, Y+48	; 0x30
    2538:	00 97       	sbiw	r24, 0x00	; 0
    253a:	69 f7       	brne	.-38     	; 0x2516 <LCD_vInit+0x37a>
    253c:	14 c0       	rjmp	.+40     	; 0x2566 <LCD_vInit+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253e:	69 a9       	ldd	r22, Y+49	; 0x31
    2540:	7a a9       	ldd	r23, Y+50	; 0x32
    2542:	8b a9       	ldd	r24, Y+51	; 0x33
    2544:	9c a9       	ldd	r25, Y+52	; 0x34
    2546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	98 ab       	std	Y+48, r25	; 0x30
    2550:	8f a7       	std	Y+47, r24	; 0x2f
    2552:	8f a5       	ldd	r24, Y+47	; 0x2f
    2554:	98 a9       	ldd	r25, Y+48	; 0x30
    2556:	9c a7       	std	Y+44, r25	; 0x2c
    2558:	8b a7       	std	Y+43, r24	; 0x2b
    255a:	8b a5       	ldd	r24, Y+43	; 0x2b
    255c:	9c a5       	ldd	r25, Y+44	; 0x2c
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	f1 f7       	brne	.-4      	; 0x255e <LCD_vInit+0x3c2>
    2562:	9c a7       	std	Y+44, r25	; 0x2c
    2564:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
    2566:	8e e0       	ldi	r24, 0x0E	; 14
    2568:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <LCD_vSend_cmd>
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	a0 e8       	ldi	r26, 0x80	; 128
    2572:	bf e3       	ldi	r27, 0x3F	; 63
    2574:	8f a3       	std	Y+39, r24	; 0x27
    2576:	98 a7       	std	Y+40, r25	; 0x28
    2578:	a9 a7       	std	Y+41, r26	; 0x29
    257a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257c:	6f a1       	ldd	r22, Y+39	; 0x27
    257e:	78 a5       	ldd	r23, Y+40	; 0x28
    2580:	89 a5       	ldd	r24, Y+41	; 0x29
    2582:	9a a5       	ldd	r25, Y+42	; 0x2a
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	4a ef       	ldi	r20, 0xFA	; 250
    258a:	54 e4       	ldi	r21, 0x44	; 68
    258c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	8b a3       	std	Y+35, r24	; 0x23
    2596:	9c a3       	std	Y+36, r25	; 0x24
    2598:	ad a3       	std	Y+37, r26	; 0x25
    259a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    259c:	6b a1       	ldd	r22, Y+35	; 0x23
    259e:	7c a1       	ldd	r23, Y+36	; 0x24
    25a0:	8d a1       	ldd	r24, Y+37	; 0x25
    25a2:	9e a1       	ldd	r25, Y+38	; 0x26
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	40 e8       	ldi	r20, 0x80	; 128
    25aa:	5f e3       	ldi	r21, 0x3F	; 63
    25ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25b0:	88 23       	and	r24, r24
    25b2:	2c f4       	brge	.+10     	; 0x25be <LCD_vInit+0x422>
		__ticks = 1;
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	9a a3       	std	Y+34, r25	; 0x22
    25ba:	89 a3       	std	Y+33, r24	; 0x21
    25bc:	3f c0       	rjmp	.+126    	; 0x263c <LCD_vInit+0x4a0>
	else if (__tmp > 65535)
    25be:	6b a1       	ldd	r22, Y+35	; 0x23
    25c0:	7c a1       	ldd	r23, Y+36	; 0x24
    25c2:	8d a1       	ldd	r24, Y+37	; 0x25
    25c4:	9e a1       	ldd	r25, Y+38	; 0x26
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	3f ef       	ldi	r19, 0xFF	; 255
    25ca:	4f e7       	ldi	r20, 0x7F	; 127
    25cc:	57 e4       	ldi	r21, 0x47	; 71
    25ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25d2:	18 16       	cp	r1, r24
    25d4:	4c f5       	brge	.+82     	; 0x2628 <LCD_vInit+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d6:	6f a1       	ldd	r22, Y+39	; 0x27
    25d8:	78 a5       	ldd	r23, Y+40	; 0x28
    25da:	89 a5       	ldd	r24, Y+41	; 0x29
    25dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e2       	ldi	r20, 0x20	; 32
    25e4:	51 e4       	ldi	r21, 0x41	; 65
    25e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	bc 01       	movw	r22, r24
    25f0:	cd 01       	movw	r24, r26
    25f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	9a a3       	std	Y+34, r25	; 0x22
    25fc:	89 a3       	std	Y+33, r24	; 0x21
    25fe:	0f c0       	rjmp	.+30     	; 0x261e <LCD_vInit+0x482>
    2600:	88 ec       	ldi	r24, 0xC8	; 200
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	98 a3       	std	Y+32, r25	; 0x20
    2606:	8f 8f       	std	Y+31, r24	; 0x1f
    2608:	8f 8d       	ldd	r24, Y+31	; 0x1f
    260a:	98 a1       	ldd	r25, Y+32	; 0x20
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	f1 f7       	brne	.-4      	; 0x260c <LCD_vInit+0x470>
    2610:	98 a3       	std	Y+32, r25	; 0x20
    2612:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2614:	89 a1       	ldd	r24, Y+33	; 0x21
    2616:	9a a1       	ldd	r25, Y+34	; 0x22
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	9a a3       	std	Y+34, r25	; 0x22
    261c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261e:	89 a1       	ldd	r24, Y+33	; 0x21
    2620:	9a a1       	ldd	r25, Y+34	; 0x22
    2622:	00 97       	sbiw	r24, 0x00	; 0
    2624:	69 f7       	brne	.-38     	; 0x2600 <LCD_vInit+0x464>
    2626:	14 c0       	rjmp	.+40     	; 0x2650 <LCD_vInit+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2628:	6b a1       	ldd	r22, Y+35	; 0x23
    262a:	7c a1       	ldd	r23, Y+36	; 0x24
    262c:	8d a1       	ldd	r24, Y+37	; 0x25
    262e:	9e a1       	ldd	r25, Y+38	; 0x26
    2630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	9a a3       	std	Y+34, r25	; 0x22
    263a:	89 a3       	std	Y+33, r24	; 0x21
    263c:	89 a1       	ldd	r24, Y+33	; 0x21
    263e:	9a a1       	ldd	r25, Y+34	; 0x22
    2640:	9e 8f       	std	Y+30, r25	; 0x1e
    2642:	8d 8f       	std	Y+29, r24	; 0x1d
    2644:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2646:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	f1 f7       	brne	.-4      	; 0x2648 <LCD_vInit+0x4ac>
    264c:	9e 8f       	std	Y+30, r25	; 0x1e
    264e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <LCD_vSend_cmd>
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	a0 e2       	ldi	r26, 0x20	; 32
    265c:	b1 e4       	ldi	r27, 0x41	; 65
    265e:	89 8f       	std	Y+25, r24	; 0x19
    2660:	9a 8f       	std	Y+26, r25	; 0x1a
    2662:	ab 8f       	std	Y+27, r26	; 0x1b
    2664:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2666:	69 8d       	ldd	r22, Y+25	; 0x19
    2668:	7a 8d       	ldd	r23, Y+26	; 0x1a
    266a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    266c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	4a ef       	ldi	r20, 0xFA	; 250
    2674:	54 e4       	ldi	r21, 0x44	; 68
    2676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	8d 8b       	std	Y+21, r24	; 0x15
    2680:	9e 8b       	std	Y+22, r25	; 0x16
    2682:	af 8b       	std	Y+23, r26	; 0x17
    2684:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2686:	6d 89       	ldd	r22, Y+21	; 0x15
    2688:	7e 89       	ldd	r23, Y+22	; 0x16
    268a:	8f 89       	ldd	r24, Y+23	; 0x17
    268c:	98 8d       	ldd	r25, Y+24	; 0x18
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	40 e8       	ldi	r20, 0x80	; 128
    2694:	5f e3       	ldi	r21, 0x3F	; 63
    2696:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    269a:	88 23       	and	r24, r24
    269c:	2c f4       	brge	.+10     	; 0x26a8 <LCD_vInit+0x50c>
		__ticks = 1;
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	9c 8b       	std	Y+20, r25	; 0x14
    26a4:	8b 8b       	std	Y+19, r24	; 0x13
    26a6:	3f c0       	rjmp	.+126    	; 0x2726 <LCD_vInit+0x58a>
	else if (__tmp > 65535)
    26a8:	6d 89       	ldd	r22, Y+21	; 0x15
    26aa:	7e 89       	ldd	r23, Y+22	; 0x16
    26ac:	8f 89       	ldd	r24, Y+23	; 0x17
    26ae:	98 8d       	ldd	r25, Y+24	; 0x18
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	3f ef       	ldi	r19, 0xFF	; 255
    26b4:	4f e7       	ldi	r20, 0x7F	; 127
    26b6:	57 e4       	ldi	r21, 0x47	; 71
    26b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26bc:	18 16       	cp	r1, r24
    26be:	4c f5       	brge	.+82     	; 0x2712 <LCD_vInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c0:	69 8d       	ldd	r22, Y+25	; 0x19
    26c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e2       	ldi	r20, 0x20	; 32
    26ce:	51 e4       	ldi	r21, 0x41	; 65
    26d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	bc 01       	movw	r22, r24
    26da:	cd 01       	movw	r24, r26
    26dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	9c 8b       	std	Y+20, r25	; 0x14
    26e6:	8b 8b       	std	Y+19, r24	; 0x13
    26e8:	0f c0       	rjmp	.+30     	; 0x2708 <LCD_vInit+0x56c>
    26ea:	88 ec       	ldi	r24, 0xC8	; 200
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	9a 8b       	std	Y+18, r25	; 0x12
    26f0:	89 8b       	std	Y+17, r24	; 0x11
    26f2:	89 89       	ldd	r24, Y+17	; 0x11
    26f4:	9a 89       	ldd	r25, Y+18	; 0x12
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	f1 f7       	brne	.-4      	; 0x26f6 <LCD_vInit+0x55a>
    26fa:	9a 8b       	std	Y+18, r25	; 0x12
    26fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2700:	9c 89       	ldd	r25, Y+20	; 0x14
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	9c 8b       	std	Y+20, r25	; 0x14
    2706:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2708:	8b 89       	ldd	r24, Y+19	; 0x13
    270a:	9c 89       	ldd	r25, Y+20	; 0x14
    270c:	00 97       	sbiw	r24, 0x00	; 0
    270e:	69 f7       	brne	.-38     	; 0x26ea <LCD_vInit+0x54e>
    2710:	14 c0       	rjmp	.+40     	; 0x273a <LCD_vInit+0x59e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2712:	6d 89       	ldd	r22, Y+21	; 0x15
    2714:	7e 89       	ldd	r23, Y+22	; 0x16
    2716:	8f 89       	ldd	r24, Y+23	; 0x17
    2718:	98 8d       	ldd	r25, Y+24	; 0x18
    271a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	9c 8b       	std	Y+20, r25	; 0x14
    2724:	8b 8b       	std	Y+19, r24	; 0x13
    2726:	8b 89       	ldd	r24, Y+19	; 0x13
    2728:	9c 89       	ldd	r25, Y+20	; 0x14
    272a:	98 8b       	std	Y+16, r25	; 0x10
    272c:	8f 87       	std	Y+15, r24	; 0x0f
    272e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2730:	98 89       	ldd	r25, Y+16	; 0x10
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	f1 f7       	brne	.-4      	; 0x2732 <LCD_vInit+0x596>
    2736:	98 8b       	std	Y+16, r25	; 0x10
    2738:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
    273a:	86 e0       	ldi	r24, 0x06	; 6
    273c:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <LCD_vSend_cmd>
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	a0 e8       	ldi	r26, 0x80	; 128
    2746:	bf e3       	ldi	r27, 0x3F	; 63
    2748:	8b 87       	std	Y+11, r24	; 0x0b
    274a:	9c 87       	std	Y+12, r25	; 0x0c
    274c:	ad 87       	std	Y+13, r26	; 0x0d
    274e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2750:	6b 85       	ldd	r22, Y+11	; 0x0b
    2752:	7c 85       	ldd	r23, Y+12	; 0x0c
    2754:	8d 85       	ldd	r24, Y+13	; 0x0d
    2756:	9e 85       	ldd	r25, Y+14	; 0x0e
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	4a ef       	ldi	r20, 0xFA	; 250
    275e:	54 e4       	ldi	r21, 0x44	; 68
    2760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	8f 83       	std	Y+7, r24	; 0x07
    276a:	98 87       	std	Y+8, r25	; 0x08
    276c:	a9 87       	std	Y+9, r26	; 0x09
    276e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2770:	6f 81       	ldd	r22, Y+7	; 0x07
    2772:	78 85       	ldd	r23, Y+8	; 0x08
    2774:	89 85       	ldd	r24, Y+9	; 0x09
    2776:	9a 85       	ldd	r25, Y+10	; 0x0a
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e8       	ldi	r20, 0x80	; 128
    277e:	5f e3       	ldi	r21, 0x3F	; 63
    2780:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2784:	88 23       	and	r24, r24
    2786:	2c f4       	brge	.+10     	; 0x2792 <LCD_vInit+0x5f6>
		__ticks = 1;
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	9e 83       	std	Y+6, r25	; 0x06
    278e:	8d 83       	std	Y+5, r24	; 0x05
    2790:	3f c0       	rjmp	.+126    	; 0x2810 <LCD_vInit+0x674>
	else if (__tmp > 65535)
    2792:	6f 81       	ldd	r22, Y+7	; 0x07
    2794:	78 85       	ldd	r23, Y+8	; 0x08
    2796:	89 85       	ldd	r24, Y+9	; 0x09
    2798:	9a 85       	ldd	r25, Y+10	; 0x0a
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	3f ef       	ldi	r19, 0xFF	; 255
    279e:	4f e7       	ldi	r20, 0x7F	; 127
    27a0:	57 e4       	ldi	r21, 0x47	; 71
    27a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27a6:	18 16       	cp	r1, r24
    27a8:	4c f5       	brge	.+82     	; 0x27fc <LCD_vInit+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e2       	ldi	r20, 0x20	; 32
    27b8:	51 e4       	ldi	r21, 0x41	; 65
    27ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	bc 01       	movw	r22, r24
    27c4:	cd 01       	movw	r24, r26
    27c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	9e 83       	std	Y+6, r25	; 0x06
    27d0:	8d 83       	std	Y+5, r24	; 0x05
    27d2:	0f c0       	rjmp	.+30     	; 0x27f2 <LCD_vInit+0x656>
    27d4:	88 ec       	ldi	r24, 0xC8	; 200
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	9c 83       	std	Y+4, r25	; 0x04
    27da:	8b 83       	std	Y+3, r24	; 0x03
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	9c 81       	ldd	r25, Y+4	; 0x04
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	f1 f7       	brne	.-4      	; 0x27e0 <LCD_vInit+0x644>
    27e4:	9c 83       	std	Y+4, r25	; 0x04
    27e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ea:	9e 81       	ldd	r25, Y+6	; 0x06
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	9e 83       	std	Y+6, r25	; 0x06
    27f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f2:	8d 81       	ldd	r24, Y+5	; 0x05
    27f4:	9e 81       	ldd	r25, Y+6	; 0x06
    27f6:	00 97       	sbiw	r24, 0x00	; 0
    27f8:	69 f7       	brne	.-38     	; 0x27d4 <LCD_vInit+0x638>
    27fa:	14 c0       	rjmp	.+40     	; 0x2824 <LCD_vInit+0x688>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fc:	6f 81       	ldd	r22, Y+7	; 0x07
    27fe:	78 85       	ldd	r23, Y+8	; 0x08
    2800:	89 85       	ldd	r24, Y+9	; 0x09
    2802:	9a 85       	ldd	r25, Y+10	; 0x0a
    2804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	9e 83       	std	Y+6, r25	; 0x06
    280e:	8d 83       	std	Y+5, r24	; 0x05
    2810:	8d 81       	ldd	r24, Y+5	; 0x05
    2812:	9e 81       	ldd	r25, Y+6	; 0x06
    2814:	9a 83       	std	Y+2, r25	; 0x02
    2816:	89 83       	std	Y+1, r24	; 0x01
    2818:	89 81       	ldd	r24, Y+1	; 0x01
    281a:	9a 81       	ldd	r25, Y+2	; 0x02
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	f1 f7       	brne	.-4      	; 0x281c <LCD_vInit+0x680>
    2820:	9a 83       	std	Y+2, r25	; 0x02
    2822:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	#endif
}
    2824:	cc 5a       	subi	r28, 0xAC	; 172
    2826:	df 4f       	sbci	r29, 0xFF	; 255
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	1f 91       	pop	r17
    2838:	0f 91       	pop	r16
    283a:	08 95       	ret

0000283c <send_falling_edge>:


static void send_falling_edge(void)
{
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	6c 97       	sbiw	r28, 0x1c	; 28
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	f8 94       	cli
    284a:	de bf       	out	0x3e, r29	; 62
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	cd bf       	out	0x3d, r28	; 61
	DIO_write('A',EN,1);
    2850:	81 e4       	ldi	r24, 0x41	; 65
    2852:	62 e0       	ldi	r22, 0x02	; 2
    2854:	41 e0       	ldi	r20, 0x01	; 1
    2856:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <DIO_write>
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	a0 e0       	ldi	r26, 0x00	; 0
    2860:	b0 e4       	ldi	r27, 0x40	; 64
    2862:	89 8f       	std	Y+25, r24	; 0x19
    2864:	9a 8f       	std	Y+26, r25	; 0x1a
    2866:	ab 8f       	std	Y+27, r26	; 0x1b
    2868:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    286a:	69 8d       	ldd	r22, Y+25	; 0x19
    286c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    286e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2870:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	4a ef       	ldi	r20, 0xFA	; 250
    2878:	54 e4       	ldi	r21, 0x44	; 68
    287a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	8d 8b       	std	Y+21, r24	; 0x15
    2884:	9e 8b       	std	Y+22, r25	; 0x16
    2886:	af 8b       	std	Y+23, r26	; 0x17
    2888:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    288a:	6d 89       	ldd	r22, Y+21	; 0x15
    288c:	7e 89       	ldd	r23, Y+22	; 0x16
    288e:	8f 89       	ldd	r24, Y+23	; 0x17
    2890:	98 8d       	ldd	r25, Y+24	; 0x18
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	40 e8       	ldi	r20, 0x80	; 128
    2898:	5f e3       	ldi	r21, 0x3F	; 63
    289a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    289e:	88 23       	and	r24, r24
    28a0:	2c f4       	brge	.+10     	; 0x28ac <send_falling_edge+0x70>
		__ticks = 1;
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	9c 8b       	std	Y+20, r25	; 0x14
    28a8:	8b 8b       	std	Y+19, r24	; 0x13
    28aa:	3f c0       	rjmp	.+126    	; 0x292a <send_falling_edge+0xee>
	else if (__tmp > 65535)
    28ac:	6d 89       	ldd	r22, Y+21	; 0x15
    28ae:	7e 89       	ldd	r23, Y+22	; 0x16
    28b0:	8f 89       	ldd	r24, Y+23	; 0x17
    28b2:	98 8d       	ldd	r25, Y+24	; 0x18
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	3f ef       	ldi	r19, 0xFF	; 255
    28b8:	4f e7       	ldi	r20, 0x7F	; 127
    28ba:	57 e4       	ldi	r21, 0x47	; 71
    28bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28c0:	18 16       	cp	r1, r24
    28c2:	4c f5       	brge	.+82     	; 0x2916 <send_falling_edge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c4:	69 8d       	ldd	r22, Y+25	; 0x19
    28c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	40 e2       	ldi	r20, 0x20	; 32
    28d2:	51 e4       	ldi	r21, 0x41	; 65
    28d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	bc 01       	movw	r22, r24
    28de:	cd 01       	movw	r24, r26
    28e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	9c 8b       	std	Y+20, r25	; 0x14
    28ea:	8b 8b       	std	Y+19, r24	; 0x13
    28ec:	0f c0       	rjmp	.+30     	; 0x290c <send_falling_edge+0xd0>
    28ee:	88 ec       	ldi	r24, 0xC8	; 200
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	9a 8b       	std	Y+18, r25	; 0x12
    28f4:	89 8b       	std	Y+17, r24	; 0x11
    28f6:	89 89       	ldd	r24, Y+17	; 0x11
    28f8:	9a 89       	ldd	r25, Y+18	; 0x12
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	f1 f7       	brne	.-4      	; 0x28fa <send_falling_edge+0xbe>
    28fe:	9a 8b       	std	Y+18, r25	; 0x12
    2900:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2902:	8b 89       	ldd	r24, Y+19	; 0x13
    2904:	9c 89       	ldd	r25, Y+20	; 0x14
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	9c 8b       	std	Y+20, r25	; 0x14
    290a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290c:	8b 89       	ldd	r24, Y+19	; 0x13
    290e:	9c 89       	ldd	r25, Y+20	; 0x14
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	69 f7       	brne	.-38     	; 0x28ee <send_falling_edge+0xb2>
    2914:	14 c0       	rjmp	.+40     	; 0x293e <send_falling_edge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2916:	6d 89       	ldd	r22, Y+21	; 0x15
    2918:	7e 89       	ldd	r23, Y+22	; 0x16
    291a:	8f 89       	ldd	r24, Y+23	; 0x17
    291c:	98 8d       	ldd	r25, Y+24	; 0x18
    291e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	9c 8b       	std	Y+20, r25	; 0x14
    2928:	8b 8b       	std	Y+19, r24	; 0x13
    292a:	8b 89       	ldd	r24, Y+19	; 0x13
    292c:	9c 89       	ldd	r25, Y+20	; 0x14
    292e:	98 8b       	std	Y+16, r25	; 0x10
    2930:	8f 87       	std	Y+15, r24	; 0x0f
    2932:	8f 85       	ldd	r24, Y+15	; 0x0f
    2934:	98 89       	ldd	r25, Y+16	; 0x10
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	f1 f7       	brne	.-4      	; 0x2936 <send_falling_edge+0xfa>
    293a:	98 8b       	std	Y+16, r25	; 0x10
    293c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_write('A',EN,0);
    293e:	81 e4       	ldi	r24, 0x41	; 65
    2940:	62 e0       	ldi	r22, 0x02	; 2
    2942:	40 e0       	ldi	r20, 0x00	; 0
    2944:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <DIO_write>
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	a0 e0       	ldi	r26, 0x00	; 0
    294e:	b0 e4       	ldi	r27, 0x40	; 64
    2950:	8b 87       	std	Y+11, r24	; 0x0b
    2952:	9c 87       	std	Y+12, r25	; 0x0c
    2954:	ad 87       	std	Y+13, r26	; 0x0d
    2956:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2958:	6b 85       	ldd	r22, Y+11	; 0x0b
    295a:	7c 85       	ldd	r23, Y+12	; 0x0c
    295c:	8d 85       	ldd	r24, Y+13	; 0x0d
    295e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	4a ef       	ldi	r20, 0xFA	; 250
    2966:	54 e4       	ldi	r21, 0x44	; 68
    2968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	8f 83       	std	Y+7, r24	; 0x07
    2972:	98 87       	std	Y+8, r25	; 0x08
    2974:	a9 87       	std	Y+9, r26	; 0x09
    2976:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2978:	6f 81       	ldd	r22, Y+7	; 0x07
    297a:	78 85       	ldd	r23, Y+8	; 0x08
    297c:	89 85       	ldd	r24, Y+9	; 0x09
    297e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e8       	ldi	r20, 0x80	; 128
    2986:	5f e3       	ldi	r21, 0x3F	; 63
    2988:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    298c:	88 23       	and	r24, r24
    298e:	2c f4       	brge	.+10     	; 0x299a <send_falling_edge+0x15e>
		__ticks = 1;
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	9e 83       	std	Y+6, r25	; 0x06
    2996:	8d 83       	std	Y+5, r24	; 0x05
    2998:	3f c0       	rjmp	.+126    	; 0x2a18 <send_falling_edge+0x1dc>
	else if (__tmp > 65535)
    299a:	6f 81       	ldd	r22, Y+7	; 0x07
    299c:	78 85       	ldd	r23, Y+8	; 0x08
    299e:	89 85       	ldd	r24, Y+9	; 0x09
    29a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	3f ef       	ldi	r19, 0xFF	; 255
    29a6:	4f e7       	ldi	r20, 0x7F	; 127
    29a8:	57 e4       	ldi	r21, 0x47	; 71
    29aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29ae:	18 16       	cp	r1, r24
    29b0:	4c f5       	brge	.+82     	; 0x2a04 <send_falling_edge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	40 e2       	ldi	r20, 0x20	; 32
    29c0:	51 e4       	ldi	r21, 0x41	; 65
    29c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	bc 01       	movw	r22, r24
    29cc:	cd 01       	movw	r24, r26
    29ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	9e 83       	std	Y+6, r25	; 0x06
    29d8:	8d 83       	std	Y+5, r24	; 0x05
    29da:	0f c0       	rjmp	.+30     	; 0x29fa <send_falling_edge+0x1be>
    29dc:	88 ec       	ldi	r24, 0xC8	; 200
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	9c 83       	std	Y+4, r25	; 0x04
    29e2:	8b 83       	std	Y+3, r24	; 0x03
    29e4:	8b 81       	ldd	r24, Y+3	; 0x03
    29e6:	9c 81       	ldd	r25, Y+4	; 0x04
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <send_falling_edge+0x1ac>
    29ec:	9c 83       	std	Y+4, r25	; 0x04
    29ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f0:	8d 81       	ldd	r24, Y+5	; 0x05
    29f2:	9e 81       	ldd	r25, Y+6	; 0x06
    29f4:	01 97       	sbiw	r24, 0x01	; 1
    29f6:	9e 83       	std	Y+6, r25	; 0x06
    29f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fa:	8d 81       	ldd	r24, Y+5	; 0x05
    29fc:	9e 81       	ldd	r25, Y+6	; 0x06
    29fe:	00 97       	sbiw	r24, 0x00	; 0
    2a00:	69 f7       	brne	.-38     	; 0x29dc <send_falling_edge+0x1a0>
    2a02:	14 c0       	rjmp	.+40     	; 0x2a2c <send_falling_edge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a04:	6f 81       	ldd	r22, Y+7	; 0x07
    2a06:	78 85       	ldd	r23, Y+8	; 0x08
    2a08:	89 85       	ldd	r24, Y+9	; 0x09
    2a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	9e 83       	std	Y+6, r25	; 0x06
    2a16:	8d 83       	std	Y+5, r24	; 0x05
    2a18:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1c:	9a 83       	std	Y+2, r25	; 0x02
    2a1e:	89 83       	std	Y+1, r24	; 0x01
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	9a 81       	ldd	r25, Y+2	; 0x02
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	f1 f7       	brne	.-4      	; 0x2a24 <send_falling_edge+0x1e8>
    2a28:	9a 83       	std	Y+2, r25	; 0x02
    2a2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2a2c:	6c 96       	adiw	r28, 0x1c	; 28
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	f8 94       	cli
    2a32:	de bf       	out	0x3e, r29	; 62
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	cd bf       	out	0x3d, r28	; 61
    2a38:	cf 91       	pop	r28
    2a3a:	df 91       	pop	r29
    2a3c:	08 95       	ret

00002a3e <LCD_vSend_cmd>:
void LCD_vSend_cmd(char cmd)
{
    2a3e:	df 93       	push	r29
    2a40:	cf 93       	push	r28
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
    2a46:	2f 97       	sbiw	r28, 0x0f	; 15
    2a48:	0f b6       	in	r0, 0x3f	; 63
    2a4a:	f8 94       	cli
    2a4c:	de bf       	out	0x3e, r29	; 62
    2a4e:	0f be       	out	0x3f, r0	; 63
    2a50:	cd bf       	out	0x3d, r28	; 61
    2a52:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_write_port('A',cmd);
	DIO_write('A',RS,0);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('A',cmd>>4);
    2a54:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a56:	98 2f       	mov	r25, r24
    2a58:	92 95       	swap	r25
    2a5a:	9f 70       	andi	r25, 0x0F	; 15
    2a5c:	81 e4       	ldi	r24, 0x41	; 65
    2a5e:	69 2f       	mov	r22, r25
    2a60:	0e 94 07 0c 	call	0x180e	; 0x180e <write_high_nibble>
	DIO_write('A',RS,0);
    2a64:	81 e4       	ldi	r24, 0x41	; 65
    2a66:	61 e0       	ldi	r22, 0x01	; 1
    2a68:	40 e0       	ldi	r20, 0x00	; 0
    2a6a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <DIO_write>
	send_falling_edge();
    2a6e:	0e 94 1e 14 	call	0x283c	; 0x283c <send_falling_edge>
	write_high_nibble('A',cmd);
    2a72:	81 e4       	ldi	r24, 0x41	; 65
    2a74:	6f 85       	ldd	r22, Y+15	; 0x0f
    2a76:	0e 94 07 0c 	call	0x180e	; 0x180e <write_high_nibble>
	DIO_write('A',RS,0);
    2a7a:	81 e4       	ldi	r24, 0x41	; 65
    2a7c:	61 e0       	ldi	r22, 0x01	; 1
    2a7e:	40 e0       	ldi	r20, 0x00	; 0
    2a80:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <DIO_write>
	send_falling_edge();
    2a84:	0e 94 1e 14 	call	0x283c	; 0x283c <send_falling_edge>
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	a0 e8       	ldi	r26, 0x80	; 128
    2a8e:	bf e3       	ldi	r27, 0x3F	; 63
    2a90:	8b 87       	std	Y+11, r24	; 0x0b
    2a92:	9c 87       	std	Y+12, r25	; 0x0c
    2a94:	ad 87       	std	Y+13, r26	; 0x0d
    2a96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	4a ef       	ldi	r20, 0xFA	; 250
    2aa6:	54 e4       	ldi	r21, 0x44	; 68
    2aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	8f 83       	std	Y+7, r24	; 0x07
    2ab2:	98 87       	std	Y+8, r25	; 0x08
    2ab4:	a9 87       	std	Y+9, r26	; 0x09
    2ab6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ab8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aba:	78 85       	ldd	r23, Y+8	; 0x08
    2abc:	89 85       	ldd	r24, Y+9	; 0x09
    2abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	40 e8       	ldi	r20, 0x80	; 128
    2ac6:	5f e3       	ldi	r21, 0x3F	; 63
    2ac8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2acc:	88 23       	and	r24, r24
    2ace:	2c f4       	brge	.+10     	; 0x2ada <LCD_vSend_cmd+0x9c>
		__ticks = 1;
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	9e 83       	std	Y+6, r25	; 0x06
    2ad6:	8d 83       	std	Y+5, r24	; 0x05
    2ad8:	3f c0       	rjmp	.+126    	; 0x2b58 <LCD_vSend_cmd+0x11a>
	else if (__tmp > 65535)
    2ada:	6f 81       	ldd	r22, Y+7	; 0x07
    2adc:	78 85       	ldd	r23, Y+8	; 0x08
    2ade:	89 85       	ldd	r24, Y+9	; 0x09
    2ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	3f ef       	ldi	r19, 0xFF	; 255
    2ae6:	4f e7       	ldi	r20, 0x7F	; 127
    2ae8:	57 e4       	ldi	r21, 0x47	; 71
    2aea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aee:	18 16       	cp	r1, r24
    2af0:	4c f5       	brge	.+82     	; 0x2b44 <LCD_vSend_cmd+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2af4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2af6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2af8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	40 e2       	ldi	r20, 0x20	; 32
    2b00:	51 e4       	ldi	r21, 0x41	; 65
    2b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	9e 83       	std	Y+6, r25	; 0x06
    2b18:	8d 83       	std	Y+5, r24	; 0x05
    2b1a:	0f c0       	rjmp	.+30     	; 0x2b3a <LCD_vSend_cmd+0xfc>
    2b1c:	88 ec       	ldi	r24, 0xC8	; 200
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	9c 83       	std	Y+4, r25	; 0x04
    2b22:	8b 83       	std	Y+3, r24	; 0x03
    2b24:	8b 81       	ldd	r24, Y+3	; 0x03
    2b26:	9c 81       	ldd	r25, Y+4	; 0x04
    2b28:	01 97       	sbiw	r24, 0x01	; 1
    2b2a:	f1 f7       	brne	.-4      	; 0x2b28 <LCD_vSend_cmd+0xea>
    2b2c:	9c 83       	std	Y+4, r25	; 0x04
    2b2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b30:	8d 81       	ldd	r24, Y+5	; 0x05
    2b32:	9e 81       	ldd	r25, Y+6	; 0x06
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	9e 83       	std	Y+6, r25	; 0x06
    2b38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b3e:	00 97       	sbiw	r24, 0x00	; 0
    2b40:	69 f7       	brne	.-38     	; 0x2b1c <LCD_vSend_cmd+0xde>
    2b42:	14 c0       	rjmp	.+40     	; 0x2b6c <LCD_vSend_cmd+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b44:	6f 81       	ldd	r22, Y+7	; 0x07
    2b46:	78 85       	ldd	r23, Y+8	; 0x08
    2b48:	89 85       	ldd	r24, Y+9	; 0x09
    2b4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	9e 83       	std	Y+6, r25	; 0x06
    2b56:	8d 83       	std	Y+5, r24	; 0x05
    2b58:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b5c:	9a 83       	std	Y+2, r25	; 0x02
    2b5e:	89 83       	std	Y+1, r24	; 0x01
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	9a 81       	ldd	r25, Y+2	; 0x02
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <LCD_vSend_cmd+0x126>
    2b68:	9a 83       	std	Y+2, r25	; 0x02
    2b6a:	89 83       	std	Y+1, r24	; 0x01
	#endif
	_delay_ms(1);
}
    2b6c:	2f 96       	adiw	r28, 0x0f	; 15
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	f8 94       	cli
    2b72:	de bf       	out	0x3e, r29	; 62
    2b74:	0f be       	out	0x3f, r0	; 63
    2b76:	cd bf       	out	0x3d, r28	; 61
    2b78:	cf 91       	pop	r28
    2b7a:	df 91       	pop	r29
    2b7c:	08 95       	ret

00002b7e <LCD_vSend_char>:

void LCD_vSend_char(char data)
{
    2b7e:	df 93       	push	r29
    2b80:	cf 93       	push	r28
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
    2b86:	2f 97       	sbiw	r28, 0x0f	; 15
    2b88:	0f b6       	in	r0, 0x3f	; 63
    2b8a:	f8 94       	cli
    2b8c:	de bf       	out	0x3e, r29	; 62
    2b8e:	0f be       	out	0x3f, r0	; 63
    2b90:	cd bf       	out	0x3d, r28	; 61
    2b92:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_write_port('A',data);
	DIO_write('A',RS,1);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('A',data>>4);
    2b94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b96:	98 2f       	mov	r25, r24
    2b98:	92 95       	swap	r25
    2b9a:	9f 70       	andi	r25, 0x0F	; 15
    2b9c:	81 e4       	ldi	r24, 0x41	; 65
    2b9e:	69 2f       	mov	r22, r25
    2ba0:	0e 94 07 0c 	call	0x180e	; 0x180e <write_high_nibble>
	DIO_write('A',RS,1);
    2ba4:	81 e4       	ldi	r24, 0x41	; 65
    2ba6:	61 e0       	ldi	r22, 0x01	; 1
    2ba8:	41 e0       	ldi	r20, 0x01	; 1
    2baa:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <DIO_write>
	send_falling_edge();
    2bae:	0e 94 1e 14 	call	0x283c	; 0x283c <send_falling_edge>
	write_high_nibble('A',data);
    2bb2:	81 e4       	ldi	r24, 0x41	; 65
    2bb4:	6f 85       	ldd	r22, Y+15	; 0x0f
    2bb6:	0e 94 07 0c 	call	0x180e	; 0x180e <write_high_nibble>
	DIO_write('A',RS,1);
    2bba:	81 e4       	ldi	r24, 0x41	; 65
    2bbc:	61 e0       	ldi	r22, 0x01	; 1
    2bbe:	41 e0       	ldi	r20, 0x01	; 1
    2bc0:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <DIO_write>
	send_falling_edge();
    2bc4:	0e 94 1e 14 	call	0x283c	; 0x283c <send_falling_edge>
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	a0 e8       	ldi	r26, 0x80	; 128
    2bce:	bf e3       	ldi	r27, 0x3F	; 63
    2bd0:	8b 87       	std	Y+11, r24	; 0x0b
    2bd2:	9c 87       	std	Y+12, r25	; 0x0c
    2bd4:	ad 87       	std	Y+13, r26	; 0x0d
    2bd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bda:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bde:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	4a ef       	ldi	r20, 0xFA	; 250
    2be6:	54 e4       	ldi	r21, 0x44	; 68
    2be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	8f 83       	std	Y+7, r24	; 0x07
    2bf2:	98 87       	std	Y+8, r25	; 0x08
    2bf4:	a9 87       	std	Y+9, r26	; 0x09
    2bf6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bf8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bfa:	78 85       	ldd	r23, Y+8	; 0x08
    2bfc:	89 85       	ldd	r24, Y+9	; 0x09
    2bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	40 e8       	ldi	r20, 0x80	; 128
    2c06:	5f e3       	ldi	r21, 0x3F	; 63
    2c08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c0c:	88 23       	and	r24, r24
    2c0e:	2c f4       	brge	.+10     	; 0x2c1a <LCD_vSend_char+0x9c>
		__ticks = 1;
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	9e 83       	std	Y+6, r25	; 0x06
    2c16:	8d 83       	std	Y+5, r24	; 0x05
    2c18:	3f c0       	rjmp	.+126    	; 0x2c98 <LCD_vSend_char+0x11a>
	else if (__tmp > 65535)
    2c1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c1c:	78 85       	ldd	r23, Y+8	; 0x08
    2c1e:	89 85       	ldd	r24, Y+9	; 0x09
    2c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	3f ef       	ldi	r19, 0xFF	; 255
    2c26:	4f e7       	ldi	r20, 0x7F	; 127
    2c28:	57 e4       	ldi	r21, 0x47	; 71
    2c2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c2e:	18 16       	cp	r1, r24
    2c30:	4c f5       	brge	.+82     	; 0x2c84 <LCD_vSend_char+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c32:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c34:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	40 e2       	ldi	r20, 0x20	; 32
    2c40:	51 e4       	ldi	r21, 0x41	; 65
    2c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	bc 01       	movw	r22, r24
    2c4c:	cd 01       	movw	r24, r26
    2c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	9e 83       	std	Y+6, r25	; 0x06
    2c58:	8d 83       	std	Y+5, r24	; 0x05
    2c5a:	0f c0       	rjmp	.+30     	; 0x2c7a <LCD_vSend_char+0xfc>
    2c5c:	88 ec       	ldi	r24, 0xC8	; 200
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	9c 83       	std	Y+4, r25	; 0x04
    2c62:	8b 83       	std	Y+3, r24	; 0x03
    2c64:	8b 81       	ldd	r24, Y+3	; 0x03
    2c66:	9c 81       	ldd	r25, Y+4	; 0x04
    2c68:	01 97       	sbiw	r24, 0x01	; 1
    2c6a:	f1 f7       	brne	.-4      	; 0x2c68 <LCD_vSend_char+0xea>
    2c6c:	9c 83       	std	Y+4, r25	; 0x04
    2c6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c70:	8d 81       	ldd	r24, Y+5	; 0x05
    2c72:	9e 81       	ldd	r25, Y+6	; 0x06
    2c74:	01 97       	sbiw	r24, 0x01	; 1
    2c76:	9e 83       	std	Y+6, r25	; 0x06
    2c78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7e:	00 97       	sbiw	r24, 0x00	; 0
    2c80:	69 f7       	brne	.-38     	; 0x2c5c <LCD_vSend_char+0xde>
    2c82:	14 c0       	rjmp	.+40     	; 0x2cac <LCD_vSend_char+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c84:	6f 81       	ldd	r22, Y+7	; 0x07
    2c86:	78 85       	ldd	r23, Y+8	; 0x08
    2c88:	89 85       	ldd	r24, Y+9	; 0x09
    2c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	9e 83       	std	Y+6, r25	; 0x06
    2c96:	8d 83       	std	Y+5, r24	; 0x05
    2c98:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9c:	9a 83       	std	Y+2, r25	; 0x02
    2c9e:	89 83       	std	Y+1, r24	; 0x01
    2ca0:	89 81       	ldd	r24, Y+1	; 0x01
    2ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	f1 f7       	brne	.-4      	; 0x2ca4 <LCD_vSend_char+0x126>
    2ca8:	9a 83       	std	Y+2, r25	; 0x02
    2caa:	89 83       	std	Y+1, r24	; 0x01
	#endif
	_delay_ms(1);
}
    2cac:	2f 96       	adiw	r28, 0x0f	; 15
    2cae:	0f b6       	in	r0, 0x3f	; 63
    2cb0:	f8 94       	cli
    2cb2:	de bf       	out	0x3e, r29	; 62
    2cb4:	0f be       	out	0x3f, r0	; 63
    2cb6:	cd bf       	out	0x3d, r28	; 61
    2cb8:	cf 91       	pop	r28
    2cba:	df 91       	pop	r29
    2cbc:	08 95       	ret

00002cbe <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	00 d0       	rcall	.+0      	; 0x2cc4 <LCD_vSend_string+0x6>
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
    2cc8:	9a 83       	std	Y+2, r25	; 0x02
    2cca:	89 83       	std	Y+1, r24	; 0x01
    2ccc:	0a c0       	rjmp	.+20     	; 0x2ce2 <LCD_vSend_string+0x24>
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
    2cce:	e9 81       	ldd	r30, Y+1	; 0x01
    2cd0:	fa 81       	ldd	r31, Y+2	; 0x02
    2cd2:	80 81       	ld	r24, Z
    2cd4:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <LCD_vSend_char>
		data++;
    2cd8:	89 81       	ldd	r24, Y+1	; 0x01
    2cda:	9a 81       	ldd	r25, Y+2	; 0x02
    2cdc:	01 96       	adiw	r24, 0x01	; 1
    2cde:	9a 83       	std	Y+2, r25	; 0x02
    2ce0:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
    2ce2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ce4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ce6:	80 81       	ld	r24, Z
    2ce8:	88 23       	and	r24, r24
    2cea:	89 f7       	brne	.-30     	; 0x2cce <LCD_vSend_string+0x10>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	cf 91       	pop	r28
    2cf2:	df 91       	pop	r29
    2cf4:	08 95       	ret

00002cf6 <LCD_clearscreen>:
void LCD_clearscreen()
{
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
    2cfe:	2e 97       	sbiw	r28, 0x0e	; 14
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	f8 94       	cli
    2d04:	de bf       	out	0x3e, r29	; 62
    2d06:	0f be       	out	0x3f, r0	; 63
    2d08:	cd bf       	out	0x3d, r28	; 61
	LCD_vSend_cmd(CLR_SCREEN);
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <LCD_vSend_cmd>
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	a0 e2       	ldi	r26, 0x20	; 32
    2d16:	b1 e4       	ldi	r27, 0x41	; 65
    2d18:	8b 87       	std	Y+11, r24	; 0x0b
    2d1a:	9c 87       	std	Y+12, r25	; 0x0c
    2d1c:	ad 87       	std	Y+13, r26	; 0x0d
    2d1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	4a ef       	ldi	r20, 0xFA	; 250
    2d2e:	54 e4       	ldi	r21, 0x44	; 68
    2d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	8f 83       	std	Y+7, r24	; 0x07
    2d3a:	98 87       	std	Y+8, r25	; 0x08
    2d3c:	a9 87       	std	Y+9, r26	; 0x09
    2d3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d40:	6f 81       	ldd	r22, Y+7	; 0x07
    2d42:	78 85       	ldd	r23, Y+8	; 0x08
    2d44:	89 85       	ldd	r24, Y+9	; 0x09
    2d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	40 e8       	ldi	r20, 0x80	; 128
    2d4e:	5f e3       	ldi	r21, 0x3F	; 63
    2d50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d54:	88 23       	and	r24, r24
    2d56:	2c f4       	brge	.+10     	; 0x2d62 <LCD_clearscreen+0x6c>
		__ticks = 1;
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	9e 83       	std	Y+6, r25	; 0x06
    2d5e:	8d 83       	std	Y+5, r24	; 0x05
    2d60:	3f c0       	rjmp	.+126    	; 0x2de0 <LCD_clearscreen+0xea>
	else if (__tmp > 65535)
    2d62:	6f 81       	ldd	r22, Y+7	; 0x07
    2d64:	78 85       	ldd	r23, Y+8	; 0x08
    2d66:	89 85       	ldd	r24, Y+9	; 0x09
    2d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	3f ef       	ldi	r19, 0xFF	; 255
    2d6e:	4f e7       	ldi	r20, 0x7F	; 127
    2d70:	57 e4       	ldi	r21, 0x47	; 71
    2d72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d76:	18 16       	cp	r1, r24
    2d78:	4c f5       	brge	.+82     	; 0x2dcc <LCD_clearscreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	40 e2       	ldi	r20, 0x20	; 32
    2d88:	51 e4       	ldi	r21, 0x41	; 65
    2d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8e:	dc 01       	movw	r26, r24
    2d90:	cb 01       	movw	r24, r22
    2d92:	bc 01       	movw	r22, r24
    2d94:	cd 01       	movw	r24, r26
    2d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	9e 83       	std	Y+6, r25	; 0x06
    2da0:	8d 83       	std	Y+5, r24	; 0x05
    2da2:	0f c0       	rjmp	.+30     	; 0x2dc2 <LCD_clearscreen+0xcc>
    2da4:	88 ec       	ldi	r24, 0xC8	; 200
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	9c 83       	std	Y+4, r25	; 0x04
    2daa:	8b 83       	std	Y+3, r24	; 0x03
    2dac:	8b 81       	ldd	r24, Y+3	; 0x03
    2dae:	9c 81       	ldd	r25, Y+4	; 0x04
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	f1 f7       	brne	.-4      	; 0x2db0 <LCD_clearscreen+0xba>
    2db4:	9c 83       	std	Y+4, r25	; 0x04
    2db6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dba:	9e 81       	ldd	r25, Y+6	; 0x06
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	9e 83       	std	Y+6, r25	; 0x06
    2dc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc6:	00 97       	sbiw	r24, 0x00	; 0
    2dc8:	69 f7       	brne	.-38     	; 0x2da4 <LCD_clearscreen+0xae>
    2dca:	14 c0       	rjmp	.+40     	; 0x2df4 <LCD_clearscreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2dce:	78 85       	ldd	r23, Y+8	; 0x08
    2dd0:	89 85       	ldd	r24, Y+9	; 0x09
    2dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	9e 83       	std	Y+6, r25	; 0x06
    2dde:	8d 83       	std	Y+5, r24	; 0x05
    2de0:	8d 81       	ldd	r24, Y+5	; 0x05
    2de2:	9e 81       	ldd	r25, Y+6	; 0x06
    2de4:	9a 83       	std	Y+2, r25	; 0x02
    2de6:	89 83       	std	Y+1, r24	; 0x01
    2de8:	89 81       	ldd	r24, Y+1	; 0x01
    2dea:	9a 81       	ldd	r25, Y+2	; 0x02
    2dec:	01 97       	sbiw	r24, 0x01	; 1
    2dee:	f1 f7       	brne	.-4      	; 0x2dec <LCD_clearscreen+0xf6>
    2df0:	9a 83       	std	Y+2, r25	; 0x02
    2df2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2df4:	2e 96       	adiw	r28, 0x0e	; 14
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	f8 94       	cli
    2dfa:	de bf       	out	0x3e, r29	; 62
    2dfc:	0f be       	out	0x3f, r0	; 63
    2dfe:	cd bf       	out	0x3d, r28	; 61
    2e00:	cf 91       	pop	r28
    2e02:	df 91       	pop	r29
    2e04:	08 95       	ret

00002e06 <LCD_movecursor>:
void LCD_movecursor(char row,char coloumn)
{
    2e06:	df 93       	push	r29
    2e08:	cf 93       	push	r28
    2e0a:	cd b7       	in	r28, 0x3d	; 61
    2e0c:	de b7       	in	r29, 0x3e	; 62
    2e0e:	61 97       	sbiw	r28, 0x11	; 17
    2e10:	0f b6       	in	r0, 0x3f	; 63
    2e12:	f8 94       	cli
    2e14:	de bf       	out	0x3e, r29	; 62
    2e16:	0f be       	out	0x3f, r0	; 63
    2e18:	cd bf       	out	0x3d, r28	; 61
    2e1a:	88 8b       	std	Y+16, r24	; 0x10
    2e1c:	69 8b       	std	Y+17, r22	; 0x11
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
    2e1e:	88 89       	ldd	r24, Y+16	; 0x10
    2e20:	83 30       	cpi	r24, 0x03	; 3
    2e22:	48 f4       	brcc	.+18     	; 0x2e36 <LCD_movecursor+0x30>
    2e24:	88 89       	ldd	r24, Y+16	; 0x10
    2e26:	88 23       	and	r24, r24
    2e28:	31 f0       	breq	.+12     	; 0x2e36 <LCD_movecursor+0x30>
    2e2a:	89 89       	ldd	r24, Y+17	; 0x11
    2e2c:	81 31       	cpi	r24, 0x11	; 17
    2e2e:	18 f4       	brcc	.+6      	; 0x2e36 <LCD_movecursor+0x30>
    2e30:	89 89       	ldd	r24, Y+17	; 0x11
    2e32:	88 23       	and	r24, r24
    2e34:	19 f4       	brne	.+6      	; 0x2e3c <LCD_movecursor+0x36>
	{
		data=0x80;
    2e36:	80 e8       	ldi	r24, 0x80	; 128
    2e38:	8f 87       	std	Y+15, r24	; 0x0f
    2e3a:	0d c0       	rjmp	.+26     	; 0x2e56 <LCD_movecursor+0x50>
	}
	else if(row==1)
    2e3c:	88 89       	ldd	r24, Y+16	; 0x10
    2e3e:	81 30       	cpi	r24, 0x01	; 1
    2e40:	21 f4       	brne	.+8      	; 0x2e4a <LCD_movecursor+0x44>
	{
		data=0x80+coloumn-1 ;
    2e42:	89 89       	ldd	r24, Y+17	; 0x11
    2e44:	81 58       	subi	r24, 0x81	; 129
    2e46:	8f 87       	std	Y+15, r24	; 0x0f
    2e48:	06 c0       	rjmp	.+12     	; 0x2e56 <LCD_movecursor+0x50>
	}
	else if (row==2)
    2e4a:	88 89       	ldd	r24, Y+16	; 0x10
    2e4c:	82 30       	cpi	r24, 0x02	; 2
    2e4e:	19 f4       	brne	.+6      	; 0x2e56 <LCD_movecursor+0x50>
	{
		data=0xc0+coloumn-1;
    2e50:	89 89       	ldd	r24, Y+17	; 0x11
    2e52:	81 54       	subi	r24, 0x41	; 65
    2e54:	8f 87       	std	Y+15, r24	; 0x0f
	}
	LCD_vSend_cmd(data);
    2e56:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e58:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <LCD_vSend_cmd>
    2e5c:	80 e0       	ldi	r24, 0x00	; 0
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	a0 e8       	ldi	r26, 0x80	; 128
    2e62:	bf e3       	ldi	r27, 0x3F	; 63
    2e64:	8b 87       	std	Y+11, r24	; 0x0b
    2e66:	9c 87       	std	Y+12, r25	; 0x0c
    2e68:	ad 87       	std	Y+13, r26	; 0x0d
    2e6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	4a ef       	ldi	r20, 0xFA	; 250
    2e7a:	54 e4       	ldi	r21, 0x44	; 68
    2e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	8f 83       	std	Y+7, r24	; 0x07
    2e86:	98 87       	std	Y+8, r25	; 0x08
    2e88:	a9 87       	std	Y+9, r26	; 0x09
    2e8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e8e:	78 85       	ldd	r23, Y+8	; 0x08
    2e90:	89 85       	ldd	r24, Y+9	; 0x09
    2e92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	40 e8       	ldi	r20, 0x80	; 128
    2e9a:	5f e3       	ldi	r21, 0x3F	; 63
    2e9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ea0:	88 23       	and	r24, r24
    2ea2:	2c f4       	brge	.+10     	; 0x2eae <LCD_movecursor+0xa8>
		__ticks = 1;
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	9e 83       	std	Y+6, r25	; 0x06
    2eaa:	8d 83       	std	Y+5, r24	; 0x05
    2eac:	3f c0       	rjmp	.+126    	; 0x2f2c <LCD_movecursor+0x126>
	else if (__tmp > 65535)
    2eae:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb0:	78 85       	ldd	r23, Y+8	; 0x08
    2eb2:	89 85       	ldd	r24, Y+9	; 0x09
    2eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	3f ef       	ldi	r19, 0xFF	; 255
    2eba:	4f e7       	ldi	r20, 0x7F	; 127
    2ebc:	57 e4       	ldi	r21, 0x47	; 71
    2ebe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ec2:	18 16       	cp	r1, r24
    2ec4:	4c f5       	brge	.+82     	; 0x2f18 <LCD_movecursor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ec8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ecc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	40 e2       	ldi	r20, 0x20	; 32
    2ed4:	51 e4       	ldi	r21, 0x41	; 65
    2ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	bc 01       	movw	r22, r24
    2ee0:	cd 01       	movw	r24, r26
    2ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	cb 01       	movw	r24, r22
    2eea:	9e 83       	std	Y+6, r25	; 0x06
    2eec:	8d 83       	std	Y+5, r24	; 0x05
    2eee:	0f c0       	rjmp	.+30     	; 0x2f0e <LCD_movecursor+0x108>
    2ef0:	88 ec       	ldi	r24, 0xC8	; 200
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	9c 83       	std	Y+4, r25	; 0x04
    2ef6:	8b 83       	std	Y+3, r24	; 0x03
    2ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    2efa:	9c 81       	ldd	r25, Y+4	; 0x04
    2efc:	01 97       	sbiw	r24, 0x01	; 1
    2efe:	f1 f7       	brne	.-4      	; 0x2efc <LCD_movecursor+0xf6>
    2f00:	9c 83       	std	Y+4, r25	; 0x04
    2f02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f04:	8d 81       	ldd	r24, Y+5	; 0x05
    2f06:	9e 81       	ldd	r25, Y+6	; 0x06
    2f08:	01 97       	sbiw	r24, 0x01	; 1
    2f0a:	9e 83       	std	Y+6, r25	; 0x06
    2f0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f10:	9e 81       	ldd	r25, Y+6	; 0x06
    2f12:	00 97       	sbiw	r24, 0x00	; 0
    2f14:	69 f7       	brne	.-38     	; 0x2ef0 <LCD_movecursor+0xea>
    2f16:	14 c0       	rjmp	.+40     	; 0x2f40 <LCD_movecursor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f18:	6f 81       	ldd	r22, Y+7	; 0x07
    2f1a:	78 85       	ldd	r23, Y+8	; 0x08
    2f1c:	89 85       	ldd	r24, Y+9	; 0x09
    2f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f24:	dc 01       	movw	r26, r24
    2f26:	cb 01       	movw	r24, r22
    2f28:	9e 83       	std	Y+6, r25	; 0x06
    2f2a:	8d 83       	std	Y+5, r24	; 0x05
    2f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f30:	9a 83       	std	Y+2, r25	; 0x02
    2f32:	89 83       	std	Y+1, r24	; 0x01
    2f34:	89 81       	ldd	r24, Y+1	; 0x01
    2f36:	9a 81       	ldd	r25, Y+2	; 0x02
    2f38:	01 97       	sbiw	r24, 0x01	; 1
    2f3a:	f1 f7       	brne	.-4      	; 0x2f38 <LCD_movecursor+0x132>
    2f3c:	9a 83       	std	Y+2, r25	; 0x02
    2f3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2f40:	61 96       	adiw	r28, 0x11	; 17
    2f42:	0f b6       	in	r0, 0x3f	; 63
    2f44:	f8 94       	cli
    2f46:	de bf       	out	0x3e, r29	; 62
    2f48:	0f be       	out	0x3f, r0	; 63
    2f4a:	cd bf       	out	0x3d, r28	; 61
    2f4c:	cf 91       	pop	r28
    2f4e:	df 91       	pop	r29
    2f50:	08 95       	ret

00002f52 <__mulsi3>:
    2f52:	62 9f       	mul	r22, r18
    2f54:	d0 01       	movw	r26, r0
    2f56:	73 9f       	mul	r23, r19
    2f58:	f0 01       	movw	r30, r0
    2f5a:	82 9f       	mul	r24, r18
    2f5c:	e0 0d       	add	r30, r0
    2f5e:	f1 1d       	adc	r31, r1
    2f60:	64 9f       	mul	r22, r20
    2f62:	e0 0d       	add	r30, r0
    2f64:	f1 1d       	adc	r31, r1
    2f66:	92 9f       	mul	r25, r18
    2f68:	f0 0d       	add	r31, r0
    2f6a:	83 9f       	mul	r24, r19
    2f6c:	f0 0d       	add	r31, r0
    2f6e:	74 9f       	mul	r23, r20
    2f70:	f0 0d       	add	r31, r0
    2f72:	65 9f       	mul	r22, r21
    2f74:	f0 0d       	add	r31, r0
    2f76:	99 27       	eor	r25, r25
    2f78:	72 9f       	mul	r23, r18
    2f7a:	b0 0d       	add	r27, r0
    2f7c:	e1 1d       	adc	r30, r1
    2f7e:	f9 1f       	adc	r31, r25
    2f80:	63 9f       	mul	r22, r19
    2f82:	b0 0d       	add	r27, r0
    2f84:	e1 1d       	adc	r30, r1
    2f86:	f9 1f       	adc	r31, r25
    2f88:	bd 01       	movw	r22, r26
    2f8a:	cf 01       	movw	r24, r30
    2f8c:	11 24       	eor	r1, r1
    2f8e:	08 95       	ret

00002f90 <__udivmodhi4>:
    2f90:	aa 1b       	sub	r26, r26
    2f92:	bb 1b       	sub	r27, r27
    2f94:	51 e1       	ldi	r21, 0x11	; 17
    2f96:	07 c0       	rjmp	.+14     	; 0x2fa6 <__udivmodhi4_ep>

00002f98 <__udivmodhi4_loop>:
    2f98:	aa 1f       	adc	r26, r26
    2f9a:	bb 1f       	adc	r27, r27
    2f9c:	a6 17       	cp	r26, r22
    2f9e:	b7 07       	cpc	r27, r23
    2fa0:	10 f0       	brcs	.+4      	; 0x2fa6 <__udivmodhi4_ep>
    2fa2:	a6 1b       	sub	r26, r22
    2fa4:	b7 0b       	sbc	r27, r23

00002fa6 <__udivmodhi4_ep>:
    2fa6:	88 1f       	adc	r24, r24
    2fa8:	99 1f       	adc	r25, r25
    2faa:	5a 95       	dec	r21
    2fac:	a9 f7       	brne	.-22     	; 0x2f98 <__udivmodhi4_loop>
    2fae:	80 95       	com	r24
    2fb0:	90 95       	com	r25
    2fb2:	bc 01       	movw	r22, r24
    2fb4:	cd 01       	movw	r24, r26
    2fb6:	08 95       	ret

00002fb8 <__udivmodsi4>:
    2fb8:	a1 e2       	ldi	r26, 0x21	; 33
    2fba:	1a 2e       	mov	r1, r26
    2fbc:	aa 1b       	sub	r26, r26
    2fbe:	bb 1b       	sub	r27, r27
    2fc0:	fd 01       	movw	r30, r26
    2fc2:	0d c0       	rjmp	.+26     	; 0x2fde <__udivmodsi4_ep>

00002fc4 <__udivmodsi4_loop>:
    2fc4:	aa 1f       	adc	r26, r26
    2fc6:	bb 1f       	adc	r27, r27
    2fc8:	ee 1f       	adc	r30, r30
    2fca:	ff 1f       	adc	r31, r31
    2fcc:	a2 17       	cp	r26, r18
    2fce:	b3 07       	cpc	r27, r19
    2fd0:	e4 07       	cpc	r30, r20
    2fd2:	f5 07       	cpc	r31, r21
    2fd4:	20 f0       	brcs	.+8      	; 0x2fde <__udivmodsi4_ep>
    2fd6:	a2 1b       	sub	r26, r18
    2fd8:	b3 0b       	sbc	r27, r19
    2fda:	e4 0b       	sbc	r30, r20
    2fdc:	f5 0b       	sbc	r31, r21

00002fde <__udivmodsi4_ep>:
    2fde:	66 1f       	adc	r22, r22
    2fe0:	77 1f       	adc	r23, r23
    2fe2:	88 1f       	adc	r24, r24
    2fe4:	99 1f       	adc	r25, r25
    2fe6:	1a 94       	dec	r1
    2fe8:	69 f7       	brne	.-38     	; 0x2fc4 <__udivmodsi4_loop>
    2fea:	60 95       	com	r22
    2fec:	70 95       	com	r23
    2fee:	80 95       	com	r24
    2ff0:	90 95       	com	r25
    2ff2:	9b 01       	movw	r18, r22
    2ff4:	ac 01       	movw	r20, r24
    2ff6:	bd 01       	movw	r22, r26
    2ff8:	cf 01       	movw	r24, r30
    2ffa:	08 95       	ret

00002ffc <__prologue_saves__>:
    2ffc:	2f 92       	push	r2
    2ffe:	3f 92       	push	r3
    3000:	4f 92       	push	r4
    3002:	5f 92       	push	r5
    3004:	6f 92       	push	r6
    3006:	7f 92       	push	r7
    3008:	8f 92       	push	r8
    300a:	9f 92       	push	r9
    300c:	af 92       	push	r10
    300e:	bf 92       	push	r11
    3010:	cf 92       	push	r12
    3012:	df 92       	push	r13
    3014:	ef 92       	push	r14
    3016:	ff 92       	push	r15
    3018:	0f 93       	push	r16
    301a:	1f 93       	push	r17
    301c:	cf 93       	push	r28
    301e:	df 93       	push	r29
    3020:	cd b7       	in	r28, 0x3d	; 61
    3022:	de b7       	in	r29, 0x3e	; 62
    3024:	ca 1b       	sub	r28, r26
    3026:	db 0b       	sbc	r29, r27
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	f8 94       	cli
    302c:	de bf       	out	0x3e, r29	; 62
    302e:	0f be       	out	0x3f, r0	; 63
    3030:	cd bf       	out	0x3d, r28	; 61
    3032:	09 94       	ijmp

00003034 <__epilogue_restores__>:
    3034:	2a 88       	ldd	r2, Y+18	; 0x12
    3036:	39 88       	ldd	r3, Y+17	; 0x11
    3038:	48 88       	ldd	r4, Y+16	; 0x10
    303a:	5f 84       	ldd	r5, Y+15	; 0x0f
    303c:	6e 84       	ldd	r6, Y+14	; 0x0e
    303e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3040:	8c 84       	ldd	r8, Y+12	; 0x0c
    3042:	9b 84       	ldd	r9, Y+11	; 0x0b
    3044:	aa 84       	ldd	r10, Y+10	; 0x0a
    3046:	b9 84       	ldd	r11, Y+9	; 0x09
    3048:	c8 84       	ldd	r12, Y+8	; 0x08
    304a:	df 80       	ldd	r13, Y+7	; 0x07
    304c:	ee 80       	ldd	r14, Y+6	; 0x06
    304e:	fd 80       	ldd	r15, Y+5	; 0x05
    3050:	0c 81       	ldd	r16, Y+4	; 0x04
    3052:	1b 81       	ldd	r17, Y+3	; 0x03
    3054:	aa 81       	ldd	r26, Y+2	; 0x02
    3056:	b9 81       	ldd	r27, Y+1	; 0x01
    3058:	ce 0f       	add	r28, r30
    305a:	d1 1d       	adc	r29, r1
    305c:	0f b6       	in	r0, 0x3f	; 63
    305e:	f8 94       	cli
    3060:	de bf       	out	0x3e, r29	; 62
    3062:	0f be       	out	0x3f, r0	; 63
    3064:	cd bf       	out	0x3d, r28	; 61
    3066:	ed 01       	movw	r28, r26
    3068:	08 95       	ret

0000306a <_exit>:
    306a:	f8 94       	cli

0000306c <__stop_program>:
    306c:	ff cf       	rjmp	.-2      	; 0x306c <__stop_program>
